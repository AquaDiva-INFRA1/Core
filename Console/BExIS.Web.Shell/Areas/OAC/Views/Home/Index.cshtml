@model BExIS.Modules.OAC.UI.Models.SelectedImportOptionsModel

@using System.Configuration

<div id="SetupContainer">
    @section Information
    {
        This module imports metadata from BioGPS, NCBI and EBI. To import metadata from a dataset, enter the accession (sample ID) in the accession field.
        <br />To import the data, you also need to specify the target metadata model, so BExIS knows which fields mean what, and a data model, in case you want to add your own data, later.
        <br />BExIS itself isn't meant as genome string storage, because it's not build for such large amounts of data, and has no appropriate search / analysis tools for it (yet).
    }
    @Html.ValidationSummary(true)

    <h1>Import External Sample Metadata</h1>

    @if (Model.Error == null)
    {
        <p>Please provide the following information.</p>
    }
    else
    {
        // "Please provide the following information." shown too would be distracting
        @Model.Error;
    }

    @using (Html.BeginForm("TransformMetadata", "Home", FormMethod.Post))
    {
<table>
    <tr>
        <td style="width: 300px;">
            @Html.LabelFor(m => m.Identifier) <span class="bx bx-required" title="Required"></span>
        </td>
        <td style="width: 400px;">
            @Html.TextBoxFor(m => m.Identifier, new { @class = "form-control" })
        </td>
        <td>
            @Html.ValidationMessageFor(m => m.Identifier)
        </td>
    </tr>
    @if (Convert.ToBoolean(ConfigurationManager.AppSettings["OAC_Selectable_Data_Structure_Id"]))
    {
        <tr>
            <td style="width: 300px;">
                @Html.LabelFor(m => m.SelectedDataStructureId) <span class="bx bx-required" title="Required"></span>
            </td>
            <td>
                @(Html.Telerik().DropDownList()
                      .Name("SelectedDataStructureId")
                      .Placeholder("Select")
                      .HtmlAttributes(new
                              {
                          title = "Select the " + Html.DisplayNameFor(m => m.SelectedDataStructureId),
                          @class = "bx-dropdown"
                              })
                      .SelectedIndex(0)
                      .BindTo(new SelectList(Model.DataStructureViewList, "Id", "Title", Model.SelectedDataStructureId))
                )
            </td>
            <td>
                @Html.ValidationMessageFor(m => m.SelectedDataStructureId)
            </td>

        </tr>
    }
    <tr>
        <td style="width: 300px;">
            @Html.LabelFor(m => m.SelectedDataSourceId) <span class="bx bx-required" title="Required"></span>
        </td>
        <td id="selectPortal">
            @(Html.Telerik().DropDownList()
                  .Name("SelectedDataSourceId")
                  .ClientEvents(events => events.OnChange("onChangeSource"))
                  .Placeholder("Select")
                  .SelectedIndex(0)
                  .HtmlAttributes(new
                  {
                      title = "Select the " + Html.DisplayNameFor(m => m.SelectedDataSourceId),
                      @class = "bx-dropdown"
                  })
                  .BindTo(new SelectList(Model.DataSourceViewList, "Id", "Title", Model.SelectedDataSourceId))
            )
        </td>
        <td>
            @Html.ValidationMessageFor(m => m.SelectedDataSourceId)
        </td>
    </tr>
    <tr>
        <td style="width: 300px;">
            @Html.LabelFor(m => m.SelectedMetadataStructureId) <span class="bx bx-required" title="Required"></span>
        </td>
        <td id="smsid_parent">
            @(Html.Telerik().DropDownList()
                      .Name("SelectedMetadataStructureId")
                      .ClientEvents(events => events.OnOpen("onOpen"))
                      .Placeholder("Select")
                      .HtmlAttributes(new
                      {
                          title = "Select the " + Html.DisplayNameFor(m => m.SelectedMetadataStructureId),
                          @class = "bx-dropdown"
                      })
                      .SelectedIndex(0)
                      .BindTo(new SelectList(Model.MetadataStructureViewList, "Id", "Title", Model.SelectedMetadataStructureId))
            )
        </td>
        <td>
            @Html.ValidationMessageFor(m => m.SelectedMetadataStructureId)
        </td>

    </tr>
</table>

        <div class="bx-footer right">
            <button type="submit" class="bx-button action" style="border:0px;">Next</button>
        </div>

    }
</div>

<style type="text/css">
    #SetupContainer .bx-dropdown {
        width: 100%;
    }
</style>

<script>
    
    var lastData = 0;

    function onOpen() {
        if (lastData) {
            setTimeout(function () {
                var items = document.getElementsByClassName('t-item');
                lastData.forEach(entry => {
                    var dat = entry.Data;
                    var id = dat.id;
                    var hasFile = dat.hasFile;
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        if (item.innerText.trim() == dat.title) {
                            item.disabled = !hasFile;
                            item.style = hasFile ? "" : "background: #777"

                        }
                    }
                })
            }, 10)
        }
        return true
    }

    function onChangeSource(e) {

        // get the selected source
        var selectedSource = e.value || -1

        // grap the mapping possibilities for it
        $.post("QueryAvailableMappings", { SelectedDataSourceId: selectedSource }, function (data) {

            var items = document.getElementsByClassName('t-item');
            // display them
            lastData = JSON.parse(data);
            lastData.forEach(entry => {
                    var dat = entry.Data;
                    var id = dat.id;
                    var hasFile = dat.hasFile;
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        if (item.innerText.trim() == dat.title) {
                            item.disabled = !hasFile;
                            item.style = hasFile ? "" : "background: #777"

                        }
                    }
            })
        });

    }

</script>
