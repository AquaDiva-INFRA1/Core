@model System.Data.DataTable
@using BExIS.Utils.Models;
@using System.Data;
@using BExIS.Dlm.Entities.DataStructure;
@using Telerik.Web.Mvc.UI;


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<script defer src="https://use.fontawesome.com/releases/v5.0.6/js/all.js"></script>

@{

    int PageSize = Convert.ToInt16(ViewData["PageSize"]);
    int CurrentPage = Convert.ToInt16(ViewData["CurrentPage"]);
    List<HeaderItem> DefaultHeaderList = (List<HeaderItem>)ViewData["DefaultHeaderList"];
    HeaderItem Id = (HeaderItem)ViewData["ID"];


    StructuredDataStructure sds = new StructuredDataStructure();
    Tuple<StructuredDataStructure, long> defaultModel = new Tuple<StructuredDataStructure, long>(sds, 0);


    GridPagerStyles pagerStyles = GridPagerStyles.PageSizeDropDown;
    pagerStyles |= GridPagerStyles.NextPreviousAndNumeric;
    pagerStyles |= GridPagerStyles.Numeric;

}

@{
    //Only show grid if the details window isn't visible, otherwise rendering problems
    if (!(bool)Session["Window"])
    {
        @(Html.Telerik().Grid<System.Data.DataRow>()
                                                        .Name("resultGrid")

                                                            .DataBinding(dataBinding => dataBinding
                                                            .Ajax()
                                                            .Select("_CustomBinding", "SemanticSearch", new { area = "DDM" })
                                                            )

                                                            .EnableCustomBinding(true)
                                                            .HtmlAttributes(new { @class = "result-grid" })
                                                            .Columns(columns =>
                                                            {

                                                                if (Model != null)
                                                                {
                                                                    for (int i = 0; i < Model.Columns.Count; i++)
                                                                    {
                                                                        DataColumn column = Model.Columns[i];
                                                                        if (DefaultHeaderList.Any(p => p.Name.Equals(column.ColumnName)))
                                                                        {
                                                                            string title;
                                                                            if (column.Caption == "")
                                                                            {
                                                                                title = column.ColumnName;
                                                                            }
                                                                            else
                                                                            {
                                                                                title = column.Caption;
                                                                            }

                                                                            columns.Bound(column.DataType, column.ColumnName)
                                                                                .Title(title);
                                                                        }
                                                                        else
                                                                        {
                                                                            columns.Bound(column.DataType, column.ColumnName).Hidden()
                                                                                   .Title(column.Caption);

                                                                        }
                                                                    }
                                                                }

                                                                if (Model != null)
                                                                {
                                                                    if (@Model.Columns.Count > 0)
                                                                    {
                                                            //Additional column with the "View Details"-Button
                                                            columns.Bound("").Width(60).ClientTemplate(
                                                                             "<div>  <center> " +
                                                                                 "<a>" +
                                                                                     "<i class=\"far fa-newspaper fa-2x \"  " +
                                                                                     "data-toggle=\"modal\" " +
                                                                                     "data-target=\"#exampleModalLong\" " +
                                                                                     "onclick='get_dataset_related_papers_by_ID(this)' " +
                                                                                     "id='<#= " + @Model.Columns[Id.Name].ColumnName + "#>'" +
                                                                                     "title=\"Load Related Publication\" ></i> " +
                                                                                 "</a>" +

                                                                             "</center> </div>"
                                                                                 )

                                                                         .Groupable(false)
                                                                         .Sortable(false)
                                                                         .Filterable(false);

                                                            //Additional column with the "View Details"-Button
                                                            columns.Bound("").Width(40).ClientTemplate(
                                                                        "<div class='searchResultFunctionDiv'>" +
                                                                        "<a  id='<#= " + @Model.Columns[Id.Name].ColumnName + "#>' class = 'bx bx-grid-function bx-show' title = 'View details' onclick='onclickDataset(this)'></a>" +
                                                                        "</div>"
                                                                        )

                                                                       .Groupable(false)
                                                                       .Sortable(false)
                                                                       .Filterable(false);

                                                                    }
                                                                }

                                                            })

                                                            .ClientEvents(events => events
                                                                        .OnRowDataBound("resultGrid_OnRowDataBound")
                                                                        .OnDataBound("onDataBound")
                                                                        .OnColumnShow("resultGrid_OnColumnChanged")
                                                                        .OnColumnHide("resultGrid_OnColumnChanged")

                                                                        )
                                                            .Sortable()
                                                            .Pageable(paging => paging.Style(pagerStyles))
                                                            .ColumnContextMenu()


        )
    }
}



<!-- Modal -->
<div id="papers">
    <div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="padding-top: 3cm;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle"><h1 class="display-4">RELATED SEMEDICO PUBLICATIONS</h1> </h5>
                    <!--
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    -->
                </div>
                <div class="modal-body">
                    <div id="results">
                        <h3> This Dataset is not coming from the semantic search</h3>
                        <h4>It is the result of the normal search</h4>
                    </div>
                </div>
                <div class="modal-footer">
                    <!--<button type="button" class="btn btn-secondary" data-dismiss="modal" id="Close_button">Close</button>-->
                    <button id="previous" type="button" style="float: left" onclick="get_dataset_related_papers_by_ID('','nextpage')">
                        <i id="spinner" class="fa fa-spinner fa-spin" style="display:none"></i>Next
                    </button>
                    <button id="previous" type="button" style="float: right" onclick="get_dataset_related_papers_by_ID('','prevpage')">
                        <i id="spinner" class="fa fa-spinner fa-spin" style="display:none"></i>Previous
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- loader : spinner  -->
<div id="spinner_" hidden="true">
    <div class="container">
        <div class="row">
            <div id="loader">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="lading"></div>
            </div>
        </div>
    </div>
</div>






<!-- maps view-->
<style type="text/css">
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 400px;
        width: 400px;
        margin: auto;
        margin-left: auto;
        margin-right: auto;
        border: 3px solid black;
        position: relative;
        overflow: hidden;
    }
</style>

    <div id="map" ></div>
    <script>
        var map;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 10,
                center: { lat: 51.080258, lng: 10.426260 },
                mapTypeId: 'terrain'
            });

            // Create a <script> tag and set the USGS URL as the source.
            var script = document.createElement('script');


            script.src = 'https://developers.google.com/maps/documentation/javascript/examples/json/earthquake_GeoJSONP.js';
            document.getElementsByTagName('head')[0].appendChild(script);

            map.data.setStyle(function (feature) {
                var magnitude = feature.getProperty('mag');
                return {
                    icon: getCircle(magnitude)
                };
            });
        }

        function getCircle(magnitude) {
            return {
                path: google.maps.SymbolPath.CIRCLE,
                fillColor: 'red',
                fillOpacity: .2,
                scale: Math.pow(2, magnitude) / 2,
                strokeColor: 'white',
                strokeWeight: .5
            };
        }

        function eqfeed_callback(results) {
            map.data.addGeoJson(results);
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCSVWSy9l71v-E-ZGrODvnvr7KkP9W1XYU&callback=initMap">
    </script>

<!-- end of maps view-->









<script type="text/javascript">

    $('document').ready(function () {

        $('.t-filter').attr("title", "Filter");

    })

    function resultGrid_OnColumnChanged(e) {
    }


    function resultGrid_OnRowDataBound(e) {

    }

    function onclickDataset(e) {

        //checked
        var id = e.getAttribute("id");


        var data = {
            id: id
        }

        $.ajax({
            url: '/DDM/Data/IsDatasetCheckedIn',
            type: 'POST',
            data: JSON.stringify(data),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                alert('Error: ' + xhr.statusText);

            },
            success: function (result) {
                if (result) {
                    window.top.location = "/DDM/Data/ShowData/" + id;
                } else {

                    alert("Dataset is locked. Please try again later.");
                }
            }
        });
    }


    function onDataBound() {
        resetAllTelerikIconTitles();
        addTooltips();
    }

    function refresh_observation_context() {
        $.ajax({
            url: '/DDM/SemanticSearch/insert_into_DB_URI_Label',
            type: 'GET',
            success: function (result) {
                alert("refresh successful");
            }
        })
    }

    function get_dataset_related_papers_by_ID(e, behaviour) {
        document.addEventListener("click", handler, true);

        document.getElementById("spinner_").removeAttribute("hidden");

        $('#button').prop('disabled', true);
        $('#Close_button').prop('disabled', true);

        $('#results').hide();

        $('#papers').hide();

        var id = null;
        if (e) {
            id = e.getAttribute("id");
        }
        $.ajax({
            url: '/DDM/SemanticSearch/get_dataset_related_papers_by_ID',
            type: 'POST',
            data: { 'id': id, 'flag': behaviour },
            success: function (result) {
                try {
                    res = JSON.parse(result);
                    if (result.length == 0) {
                        var text = "<h3> There is no related papers for this dataset </h3> <h4>Please choose another dataset</h4>";
                        $('#results').html(text);
                    } else {
                        //var text = "<p><strong>Data Set Id : " + id + "</strong></p><ol>";
                        var text = "<ol>";
                        for (i = 0; i < res.bibliographylist.length; i++) {
                            text = text + "<li><strong>" + res.bibliographylist[i].articleTitle + "</strong></li>";
                            text = text + "<h5>" + res.bibliographylist[i].abstractText + "<h5>";
                            text = text + "<ul>";
                            for (j = 0; j < res.bibliographylist[i].authors.length; j++) {
                                text = text + "<li>" + res.bibliographylist[i].authors[j].firstname + " " + res.bibliographylist[i].authors[j].lastname + "</li>";
                            }
                            text = text + "</ul><br>";
                            console.log("Article => " + res.bibliographylist[i].articleTitle);
                        }
                        text = text + "</ol>";
                        $('#results').html(text);
                    }
                }
                catch (er) {
                    console.log("ERROR => " + er);
                    var text = "<h3> Error </h3> <h4>Please a report the error</h4>";
                    $('#results').html(text);
                }
            },
            complete: function () {
                $('#results').show();
                $('#Close_button').prop('disabled', false);
                document.getElementById("spinner_").setAttribute("hidden", true);
                $('#button').prop('disabled', true);

                $('#papers').show();
            },
        });
        return true;
    }

</script>

<style type="text/css">
    #resultGrid .t-grid-content {
        position: relative;
        height: auto !important;
        max-height: 450px;
        /*overflow:auto;*/
    }

    #resultGrid .t-status,
    #resultGrid .t-status-text {
    }

    #resultGrid .searchResultFunctionDiv {
        text-align: right;
    }
</style>

<!-- CSS for the spinner -->
<style type="text/css">
    #spinner_ {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 30em;
        height: 18em;
        margin-top: -9em; /*set to a negative number 1/2 of your height*/
        margin-left: -15em; /*set to a negative number 1/2 of your width*/
    }

    #loader {
        bottom: 0;
        height: 175px;
        left: 0;
        margin: auto;
        position: absolute;
        right: 0;
        top: 0;
        width: 175px;
    }

    #loader {
        bottom: 0;
        height: 175px;
        left: 0;
        margin: auto;
        position: absolute;
        right: 0;
        top: 0;
        width: 175px;
    }

        #loader .dot {
            bottom: 0;
            height: 100%;
            left: 0;
            margin: auto;
            position: absolute;
            right: 0;
            top: 0;
            width: 87.5px;
        }

            #loader .dot::before {
                border-radius: 100%;
                content: "";
                height: 87.5px;
                left: 0;
                position: absolute;
                right: 0;
                top: 0;
                transform: scale(0);
                width: 87.5px;
            }

            #loader .dot:nth-child(7n+1) {
                transform: rotate(45deg);
            }

                #loader .dot:nth-child(7n+1)::before {
                    animation: 0.8s linear 0.1s normal none infinite running load;
                    background: #00ff80 none repeat scroll 0 0;
                }

            #loader .dot:nth-child(7n+2) {
                transform: rotate(90deg);
            }

                #loader .dot:nth-child(7n+2)::before {
                    animation: 0.8s linear 0.2s normal none infinite running load;
                    background: #00ffea none repeat scroll 0 0;
                }

            #loader .dot:nth-child(7n+3) {
                transform: rotate(135deg);
            }

                #loader .dot:nth-child(7n+3)::before {
                    animation: 0.8s linear 0.3s normal none infinite running load;
                    background: #00aaff none repeat scroll 0 0;
                }

            #loader .dot:nth-child(7n+4) {
                transform: rotate(180deg);
            }

                #loader .dot:nth-child(7n+4)::before {
                    animation: 0.8s linear 0.4s normal none infinite running load;
                    background: #0040ff none repeat scroll 0 0;
                }

            #loader .dot:nth-child(7n+5) {
                transform: rotate(225deg);
            }

                #loader .dot:nth-child(7n+5)::before {
                    animation: 0.8s linear 0.5s normal none infinite running load;
                    background: #2a00ff none repeat scroll 0 0;
                }

            #loader .dot:nth-child(7n+6) {
                transform: rotate(270deg);
            }

                #loader .dot:nth-child(7n+6)::before {
                    animation: 0.8s linear 0.6s normal none infinite running load;
                    background: #9500ff none repeat scroll 0 0;
                }

            #loader .dot:nth-child(7n+7) {
                transform: rotate(315deg);
            }

                #loader .dot:nth-child(7n+7)::before {
                    animation: 0.8s linear 0.7s normal none infinite running load;
                    background: magenta none repeat scroll 0 0;
                }

            #loader .dot:nth-child(7n+8) {
                transform: rotate(360deg);
            }

                #loader .dot:nth-child(7n+8)::before {
                    animation: 0.8s linear 0.8s normal none infinite running load;
                    background: #ff0095 none repeat scroll 0 0;
                }

        #loader .lading {
            /*background-image: url("../images/loading.gif");*/
            background-position: 50% 50%;
            background-repeat: no-repeat;
            bottom: -40px;
            height: 20px;
            left: 0;
            position: absolute;
            right: 0;
            width: 180px;
        }

    @@keyframes load {
        100% {
            opacity: 0;
            transform: scale(1);
        }
    }

    @@keyframes load {
        100% {
            opacity: 0;
            transform: scale(1);
        }
    }
</style>