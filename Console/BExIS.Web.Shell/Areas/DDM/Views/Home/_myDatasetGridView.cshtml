@model System.Data.DataTable
@using BExIS.Ddm.Model;
@using System.Data;
@using BExIS.Dlm.Entities.DataStructure;

@{
    int PageSize = 10;
    int CurrentPage = 1;
    
    if (ViewData["PageSize"] != null)
    {
        PageSize = Convert.ToInt16(ViewData["PageSize"]);	    
    }
    
    if (ViewData["CurrentPage"] != null)
    {
        CurrentPage = Convert.ToInt16(ViewData["CurrentPage"]);	    
    }
    
	List<HeaderItem> DefaultHeaderList = (List<HeaderItem>)ViewData["DefaultHeaderList"];
	HeaderItem Id = (HeaderItem)ViewData["Id"];


	StructuredDataStructure sds = new StructuredDataStructure();
	Tuple<StructuredDataStructure, long> defaultModel = new Tuple<StructuredDataStructure, long>(sds, 0);


	GridPagerStyles pagerStyles = GridPagerStyles.PageSizeDropDown;
	pagerStyles |= GridPagerStyles.NextPreviousAndNumeric;
	pagerStyles |= GridPagerStyles.Numeric;

  
}


@(Html.Telerik().Grid<System.Data.DataRow>()
        .Name("resultGrid")

            .DataBinding(dataBinding => dataBinding
                .Ajax()
                .Select("_CustomMyDatasetBinding", "Home", new { area = "DDM" })
            )
            .EnableCustomBinding(true)
            .HtmlAttributes(new { @class = "result-grid" })
            .Columns(columns =>
                {
                    if (@Model.Columns.Count > 0)
                    {
                            columns.Bound("Functions").ClientTemplate(
                            "<div class='searchResultFunctionDiv'>" +
                                @Html.ActionLink("Details", "ShowData", "Data", new { area = "DDM", id = "<#= " + @Model.Columns[Id.Name].ColumnName + "#>" }, new { @class = "t-button", @id = "<#= " + @Model.Columns[Id.Name].ColumnName + "#>" }) +
                             "</div>"
                            )
                            
                            .Width("60px")
                            .Groupable(false)
                            .Sortable(false)
                            .Filterable(false);

                    }
                    for (int i = 0; i < Model.Columns.Count; i++)
                    {
                        DataColumn column = Model.Columns[i];
                        if (DefaultHeaderList.Where(p => p.Name.Equals(column.ColumnName)).Count() > 0)
                        {

                            string title;

                            if (column.Caption == "")
                            {
                                title = column.ColumnName;
                            }
                            else
                            {
                                title = column.Caption;
                            }
                            if (title == "ID")
                            {
                                columns.Bound(column.DataType, column.ColumnName)
                                   .Title(title)
                                   .Width("35px");
                            }
                            if (title == "Title")
                            {
                                columns.Bound(column.DataType, column.ColumnName)
                                   .Title(title)
                                   .Width("100px");
                            }
                            if (title == "Description")
                            {
                                columns.Bound(column.DataType, column.ColumnName)
                                   .Title(title)
                                   .Width("220px");
                            }
                            if (title == "View" | title == "Update" | title == "Delete" | title == "Download" | title == "Grant")
                            {
                                columns.Bound(column.DataType, column.ColumnName)
                                   .Title(title)
                                   .Width("40px")
                                   .Filterable(false);
                            }
                            
                                
                        }
                        else
                        {
                            columns.Bound(column.DataType, column.ColumnName).Hidden()
                                   .Title(column.Caption);

                        }                       
                        
                    }

                })

            .ClientEvents(events => events
                        .OnComplete("onComplete")
                        .OnLoad("refreshGrid")
                        .OnSubmitChanges("refreshGrid")
                        .OnRowDataBound("resultGrid_OnRowDataBound")
                        
                       )
            .Pageable(paging =>
                paging
                    .Style(pagerStyles)
                    .PageSize(PageSize)
                    .Position(GridPagerPosition.Both)
                    .PageTo(CurrentPage)
                    )

            .Sortable()
            .Filterable()
            .ColumnContextMenu()
            .Groupable()
            .Scrollable()

)


<script type="text/javascript">

    $('document').ready(function () {

        $('.t-filter').attr("title", "Filter");
    })

	function resultGrid_OnRowDataBound(e) {

		//alert(e.item);
		var obj = e.row.childNodes;

		$.each(obj, function (i) {

			obj[i].title = obj[i].textContent;
			if (obj[i].textContent.length > 50) {
				obj[i].textContent = jQuery.trim(obj[i].textContent).substring(0, 50).trim(this) + "...";
			}
		});
	}

	function onComplete()
	{
	

	}


	function refreshGrid() {
	    //$(".t-grid .t-refresh").trigger('click');
	    $(".t-grid .t-refresh").trigger('click');
	    /*alert("GridRefresh");*/
	}


</script>

<style type="text/css">

	#resultGrid .t-grid-content
	{
        position:relative;
		height : auto !important;
		max-height:450px;
		/*overflow:auto;*/
	}

    #resultGrid .t-status
    {
       display:none;
    }

</style>