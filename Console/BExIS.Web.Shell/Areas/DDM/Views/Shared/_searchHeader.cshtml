@using Telerik.Web.Mvc.UI;
@model BExIS.Utils.Models.SearchModel

@{
    string controller = Session["Controller"].ToString();

    bool onlyPublic = ((string)Session["Controller"]) == "PublicSearch";
    string seamnticflag = (Session["seamnticflag"] == "true") ? "checked" : "";
    string semanticvalue = (Session["seamnticflag"] == "true") ? "true" : "false";

}

<div class="searchHeader">

    <div class="alert alert-info " role="alert" id="notifNLP" hidden="true">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <div>
            <strong>Entities : </strong>
            <div id="semanticEntitesContent"></div>
        </div>
        <div>
            <br />
            <strong>Relations : </strong>
            <div id="semanticRelationsContent"></div>
        </div>

    </div>

    @using (Html.BeginForm(Session["SubmissionAction"].ToString(), @controller))
    {

        <div id="search_Components">
            <table>
                <tr>
                    <td></td>
                    <td>
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.Telerik().DropDownList()
                         .Name("FilterList")
                         .SelectedIndex((int)Session["SelectedIndexFilterAC"])
                         .DropDownHtmlAttributes(new { style = "height: 200px;" })
                         .HtmlAttributes(new { style="top:2px;" })
                         .ClientEvents(events => events
                               .OnChange("onChangeFilterList"))
                        .BindTo(new SelectList(Model.SearchComponent.Categories, "Value", "DisplayName"))

                    )
                    </td>
                    <td>
                        @(Html.Telerik().AutoComplete()
                                .Name("autoComplete")
                                .Encode(false)
                                .HtmlAttributes(new {title= "Search requests that include only special character, are not supported." })
                                .DataBinding(dataBinding => dataBinding
                                    .Ajax().Select("_AutoCompleteAjaxLoading", @controller)
                                    .Cache(false))

                                .Filterable(filtering =>
                                {

                                    filtering.FilterMode(AutoCompleteFilterMode.Contains);
                                    filtering.MinimumChars(3);

                                })
                       )
                    </td>
                    <td>

                        <button type="submit" class="bx-button small function">Search</button>

                    </td>

                </tr>
                <tr>
                    <td>
                        @Html.CheckBox("seamnticflag", false, new { onclick = "toggleVisibility(this)" }) <b style="vertical-align:top">Semantic Search</b>
                        @*
                    <label class="switch">
                        <input id="seamnticflag" name="seamnticflag" value=@semanticvalue @seamnticflag type="checkbox" />
        <span class="slider round"></span>
                        </label>*@
                    </td>
                    
      
                    <td id="semanticDepthTd" >
                        <label>Semantic depth</label>
                        @Html.DropDownList("Seamntic_depth", new List<SelectListItem>
                        {
                            new SelectListItem {Text = "0", Value = "0"},
                            new SelectListItem {Text = "1", Value = "1"},
                            new SelectListItem {Text = "2", Value = "2"},
                            new SelectListItem {Text = "3", Value = "3"},
                        })
                    </td>
                    <td id="errorDistanceTd" >
                        <label>Error distance</label>
                        @Html.DropDownList("Error_distance", new List<SelectListItem>
                        {
                            new SelectListItem {Text = "0", Value = "0"},
                            new SelectListItem {Text = "1", Value = "1"},
                            new SelectListItem {Text = "2", Value = "2"},
                            new SelectListItem {Text = "3", Value = "3"},
                        })
                    </td>
                </tr>

                @if (HttpContext.Current.User != null &&
                    HttpContext.Current.User.Identity != null &&
                    !string.IsNullOrEmpty(HttpContext.Current.User.Identity.Name))
                {
                    <tr>
                        <td>
                            @*@Html.CheckBox("OnlyPublic", @onlyPublic, new { onclick = "onShowOnlyPublicChanged(this)" }) <b style="vertical-align:top">public only</b>*@
                        </td>
                    </tr>
                }
            </table>
        </div>

        <div class="search_Summery">

            @*<b>@Model.ResultComponent.NumberOfHits results for search "" in
                Category   </b> *@

        </div>
    }
</div>

<script type="text/javascript">
     function onChangeFilterList(e) {
         //alert(e.value);
         var data = e.value;
         var index = $(':selected').val();
         $.post('@Url.Action("FilterByDropDownList", @controller, new RouteValueDictionary { { "area", "ddm" } })', { SelectedFilter: data }, function (response) { });

     }

     function changeSearchType(e) {
         $.post('@Url.Action("ChangeSearchValuesACBySearchType", @controller, new RouteValueDictionary { { "area", "ddm" } })', { value: e.value }, function (response) { });
     }

     function onShowOnlyPublicChanged(e) {

         var value;

         if ($("#" + e.id).attr('checked')) {
             value = true;
         } else {
             value = false;
         }

         console.log($("#" + e.id));
         console.log(value);

         if (value === true) {
             //redirect to public search
             //console.log("public");
             window.location.href = '@Url.Action("Index", "PublicSearch", new RouteValueDictionary { { "area", "ddm" } })';

         }
         else {
             //redirect to search
             //console.log("not public");
             window.location.href='@Url.Action("Index", "Home", new RouteValueDictionary { { "area", "ddm" } })';
         }

     }


</script>
<style type="text/css">


    #search_Components table {
        width: auto;
    }

    /* The switch - the box around the slider */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        /* Hide default HTML checkbox */
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    /* The slider */
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: black;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>

@*
    <script type="text/javascript">

        document.addEventListener("click", function () {
            if (counterset('') == '0')
                document.getElementsByClassName('removeSeachHeader')[document.getElementsByClassName('removeSeachHeader').length - 1].hidden = true
            else
                document.getElementsByClassName('removeSeachHeader')[document.getElementsByClassName('removeSeachHeader').length - 1].hidden = false
        })

        $('#searchOperation').on('hidden.bs.modal', function (e) {
            add_search_term();
        })

        function add_search_term() {
            xx = document.createElement('span')
            xx.setAttribute("class", "badge badge-secondary");
            xx.setAttribute("align", "center");
            //console.log($('input[name=includeOperation]:checked', '#searchOperation').val() )
            xx.innerHTML = $('input[name=includeOperation]:checked', '#searchOperation').val()

            new_search_input = document.getElementsByClassName('t-widget t-autocomplete t-input')[document.getElementsByClassName('t-widget t-autocomplete t-input').length - 1].cloneNode(true);
            new_search_input.value = '';

            document.getElementsByClassName('t-widget t-autocomplete t-input')[document.getElementsByClassName('t-widget t-autocomplete t-input').length - 1].after(new_search_input);
            new_search_input.before(document.createElement('br'));
            new_search_input.before(xx);
            new_search_input.before(document.createElement('br'));
            counterset('increment');
        }

        function delete_search_term() {
            document.getElementsByClassName('t-widget t-autocomplete t-input')[document.getElementsByClassName('t-widget t-autocomplete t-input').length - 1].previousElementSibling.remove();
            document.getElementsByClassName('t-widget t-autocomplete t-input')[document.getElementsByClassName('t-widget t-autocomplete t-input').length - 1].previousElementSibling.remove();
            document.getElementsByClassName('t-widget t-autocomplete t-input')[document.getElementsByClassName('t-widget t-autocomplete t-input').length - 1].previousElementSibling.remove();
            document.getElementsByClassName('t-widget t-autocomplete t-input')[document.getElementsByClassName('t-widget t-autocomplete t-input').length - 1].remove();
            counterset('remove');
        }

        function counterset(action) {
            switch (action) {
                case 'increment':
                    $('#counter').val(parseInt($('#counter').val()) + 1);
                    break;
                case 'remove':
                    $('#counter').val(parseInt($('#counter').val()) - 1);
                    break;
                default:
                    return $('#counter').val();
            }
            $('#counter').click()
            //console.log("counter  search  inputs : ", $('#counter').val())
        }

        //document.getElementsByClassName().addEventListener('mousemove', (event) => { });

        function getid(e) {
            alert(e.getAttribute("id"))
        }


    </script>
*@

<script type="text/javascript">

    /*
    let entities_ = [];
    let relations_ = [];

    function getEntitiesRelation() {
        document.getElementById('semanticEntitesContent').innerHTML = document.getElementById('semanticEntitesContent').innerHTML = "";
        resultContent = document.getElementById('resultContent');
        tbody = resultContent.getElementsByTagName('tbody');
        Trs = tbody[0].getElementsByTagName('tr');
        for (let item of Trs) {
            try {
                obj = getEntitiesRelationByID(item)
                console.log(obj)
                obj['entities'].forEach(element => function () {
                    this.entities_.push(element)
                })
                obj['relations'].forEach(element => function () {
                    this.relations_.push(element)
                })
            }
            catch (error) {
                console.log(error);
            }
        }

    }
        */

    async function getEntitiesRelationByID__(item) {

        return new Promise(function (resolve, reject) {
            try {
                x = item.getElementsByTagName('td')[0];
                var data = {
                    id: x.innerText
                }
                $.ajax({
                    url: '/ddm/SemanticSearch/getEntitiesRelation',
                    type: 'POST',
                    data: data,
                    //dataType: 'json',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    error: function (xhr) {
                        alert('Error: ' + xhr.statusText);

                    },
                    success: function (result) {
                        entities = [];
                        relations = [];
                        result = JSON.parse(result)
                        result['entities'].forEach(elem => {
                            xx = document.createElement('span');
                            xx.setAttribute("class", "badge badge-secondary");
                            xx.setAttribute("style", "background-color: red;");
                            xx.innerHTML = elem;
                            entities.push(xx);
                        })
                        result['relations'].forEach(elem => {
                            xx = document.createElement('span');
                            xx.setAttribute("class", "badge badge-secondary");
                            xx.innerHTML = elem;
                            relations.push(xx);
                        })
                        return resolve({ 'entities': entities, 'relations': relations });
                    }
                });
            } catch (error) {
                console.log(error);
            }
            resolve({ 'entities': [], 'relations': [] });
        });
    }

    function fill_semantic_block(object) {

        document.getElementById('semanticEntitesContent').innerHTML = "";
        document.getElementById('semanticRelationsContent').innerHTML = "";

        object.entities.forEach(elem_ => {
            document.getElementById('semanticEntitesContent').appendChild(elem_);

        })
        object.relations.forEach(elem_ => {
            document.getElementById('semanticRelationsContent').appendChild(elem_);
        })
    }


    async function getEntitiesRelationByID(item) {

        try {
            x = item.getElementsByTagName('td')[0];
            var data = {
                id: x.innerText
            }
            entities = []
            relations = []

            $.ajax({
                url: '/ddm/SemanticSearch/getEntitiesRelation',
                type: 'POST',
                data: data,
                contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                async: true,
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);

                },
                success: function (result) {
                    result = JSON.parse(result)
                    result['entities'].forEach(elem => {
                        xx = document.createElement('span');
                        xx.setAttribute("class", "badge badge-secondary");
                        xx.setAttribute("style", "background-color: red;");
                        xx.innerHTML = elem;
                        entities.push(xx);
                    })
                    result['relations'].forEach(elem => {
                        xx = document.createElement('span');
                        xx.setAttribute("class", "badge badge-secondary");
                        xx.innerHTML = elem;
                        relations.push(xx);
                    })
                },
                complete: function (result) {
                    document.getElementById("notifNLP").removeAttribute("hidden");
                    document.getElementById('semanticEntitesContent').innerHTML = "";
                    document.getElementById('semanticRelationsContent').innerHTML = "";

                    entities.forEach(elem_ => {
                        document.getElementById('semanticEntitesContent').appendChild(elem_);

                    })
                    relations.forEach(elem_ => {
                        document.getElementById('semanticRelationsContent').appendChild(elem_);
                    })
                }
            })

        } catch (error) {
            console.log(error);
        }

    }

    function init_table_actions() {

        resultContent = document.getElementById('resultContent');
        tbody = resultContent.getElementsByTagName('tbody');
        Trs = tbody[0].getElementsByTagName('tr');
        for (let item of Trs) {
            item.addEventListener("click", function () {
                getEntitiesRelationByID(item)
            })
        }
    }

</script>

<script type="text/javascript">
    document.getElementById('seamnticflag').addEventListener('change', toggleVisibility());
    function toggleVisibility() {
        const checkbox = document.getElementById('seamnticflag');
        const semanticDepthTd = document.getElementById('semanticDepthTd');
        const errorDistanceTd = document.getElementById('errorDistanceTd');
        if (checkbox.checked) {
            semanticDepthTd.style.display = 'table-cell';
            errorDistanceTd.style.display = 'table-cell';
        } else {
            semanticDepthTd.style.display = 'none';
            errorDistanceTd.style.display = 'none';
        }
    }
</script>