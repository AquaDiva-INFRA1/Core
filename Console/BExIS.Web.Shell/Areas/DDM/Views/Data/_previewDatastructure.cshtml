@model Tuple<DataStructure, long>
@using BExIS.Ddm.Model;
@using System.Data;
@using BExIS.Dlm.Entities.DataStructure;
@using BExIS.Web.Shell.Areas.DDM.Helpers;

@{
    
    //Model.item1 = SearchResultPreview
    //Model.item2 = DatasetId

    GridPagerStyles pagerStyles = GridPagerStyles.PageSizeDropDown;
    pagerStyles |= GridPagerStyles.NextPreviousAndNumeric;
    pagerStyles |= GridPagerStyles.Numeric;

}


@if (@Model.Item1 != null)
{ 
    <h2>@Model.Item1.Self.Name</h2>
    <p>@Model.Item1.Self.Description</p>
}

@if(Model.Item1.Self is StructuredDataStructure)
{
    long id = Model.Item2;
    DataTable dt = new DataTable();
    if (Model.Item1 != null)
    {
        if (Model.Item2 > 0)
        {
            dt = SearchUIHelper.ConvertStructuredDataStructureToDataTable((StructuredDataStructure)Model.Item1.Self);//Model.Item1.ConvertToDataTable();
        }
    }
    
    
    if (Model.Item2 > 0)
    { 
        @(Html.Telerik().Grid<System.Data.DataRow>()
                .Name("dataStructureGrid")

                    .DataBinding(dataBinding => dataBinding
                        .Ajax()
                        .OperationMode(GridOperationMode.Client)
                        .Select("_CustomDataStructureBinding", "Data", new { datasetID = id })
                    )
                    .EnableCustomBinding(true)
                    .HtmlAttributes(new { @class = "dataStructure-grid" })


                    .Columns(columns =>
                    {
                        for (int i = 0; i < dt.Columns.Count; i++)
                        {
                            DataColumn column = dt.Columns[i];
                            columns.Bound(column.DataType, column.ColumnName);
                        }

                    })
            
                    //.ClientEvents(events => events
                    //     .OnRowDataBound("dataStructureGrid_OnRowDataBound")
                    //     .OnLoad("dataStructureGrid_OnLoad")
                    //    )

                    .Pageable(paging =>
                        paging.PageSize(10)
                        .Style(pagerStyles)
                        .Position(GridPagerPosition.Both)
                    )
                            
                    .ColumnContextMenu()
        )
    }
}

<br />