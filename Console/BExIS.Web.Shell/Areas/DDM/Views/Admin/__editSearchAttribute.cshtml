@model SearchAttributeViewModel

@using BExIS.Modules.Ddm.UI.Models;
@using BExIS.Utils.Models;

@{

    string Title = "New Search Attribute";

    if (Model.displayName != null)
    {
        Title = Model.displayName;
    }


    // enums to list
    // metadatanodes to list

    List<string> SearchComponentBaseType = new List<string>();
    foreach (SearchComponentBaseType ms in Enum.GetValues(typeof(SearchComponentBaseType)))
    {
        SearchComponentBaseType.Add(ms.ToString());
    }

    List<string> DataType = new List<string>();
    foreach (TypeCode ms in Enum.GetValues(typeof(TypeCode)))
    {
        DataType.Add(ms.ToString());
    }

    //for properties

    List<string> Directions = new List<string>();
    foreach (Direction ms in Enum.GetValues(typeof(Direction)))
    {
        Directions.Add(ms.ToString());
    }

    List<string> UiComponents = new List<string>();
    foreach (UiComponent ms in Enum.GetValues(typeof(UiComponent)))
    {
        UiComponents.Add(ms.ToString());
    }

    List<string> AggregationTypes = new List<string>();
    foreach (AggregationType ms in Enum.GetValues(typeof(AggregationType)))
    {
        AggregationTypes.Add(ms.ToString());
    }

    List<SearchMetadataNode> metadataNodes = new List<SearchMetadataNode>();
    if (Session["metadatNodes"] != null)
    {
        metadataNodes = (List<SearchMetadataNode>)Session["metadatNodes"];
    }

    @*
        Int64 count;
        if (Session["count"] != null)
        {
            count =int.Parse((string)Session["count"].ToString());
            Session["count"] = count ;
        }
        else
        {
            count = 0;
            Session["count"] = count;
        }
    *@

    int count = 0;
    String color = "";

}


@using (Ajax.BeginForm("Save", "Admin",
    new AjaxOptions
    {
        HttpMethod = "Post",
        //UpdateTargetId = "searchAttributeForm",
        OnSuccess = "Submit",
        OnFailure = "OnFailure"
    },
    new { id = "Form_Edit_search" }
    ))

{
    <div id="searchAttributeForm" class="bx-content" style="height:410px; overflow:auto">
        @{
            <table>
                <tr>
                    <td style="width:250px;"><h3>General</h3></td>
                </tr>
                <tr>
                    <td>
                        <label>Id</label>
                        @(Html.HiddenFor(m => m.id))
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.id, new { @disabled = "disabled" })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.displayName))<span class="bx bx-required" title="Required">
                    </td>
                    <td>
                        @(Html.TextBoxFor(m => m.displayName, new { @class = "t-input", title = "Display name of the item in the search user interface." }))
                        @Html.ValidationMessageFor(m => m.displayName)
                    </td>
                </tr>

                <tr>
                    <td style="vertical-align:top;">
                        @(Html.LabelFor(m => m.metadataNames))
                        <span class="bx bx-required" title="Required">
                    </td>
                    <td class="listOfNodes">
                        <div id="metadataNodes">
                            @if (Model.metadataNames != null)
                            {
                                foreach (string xpath in Model.metadataNames)
                                {
                                    count = count + 1;
                                    @*
                                        if(count != 1)
                                        {
                                            <hr>
                                        }
                                    *@

                                    if ((xpath != null) && (xpath.Contains(";")))
                                    {
                                        string[] list_composed_xpath = xpath.Split(';');

                                        <div id="node_container_@count" class="node_container_@count">
                                            <div id="_nodes_@count" class=" _nodes_@count">
                                                @foreach (var item in list_composed_xpath)
                                                {
                                                    @Html.DropDownListFor(m => metadataNodes, new SelectList(metadataNodes, "XPath", "DisplayNameLong", item.ToString()),
                                                                   "Select, please", new { title = "Corresponding metadata node to be used for the Lucene index.", style = "width: 350px;" })

                                                }
                                            </div>
                                            <div class="col-lg-1 text-left vcenter">
                                                <a class="removeMetadataNode" onclick="delete_node('node_container_@count')">
                                                    <span class="glyphicon glyphicon-remove-circle"></span>
                                                </a>
                                                <a onclick="add_composed_node('_nodes_@count')" title="Add Composed Node!">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </a>
                                            </div><br />
                                        </div>


                                    }
                                    else
                                    {
                                        <div id="node_container_@count" class="node_container_@count">
                                            <div id="_nodes_@count" class="_nodes_@count">

                                                @Html.DropDownListFor(m => metadataNodes, new SelectList(metadataNodes, "XPath", "DisplayNameLong", xpath.ToString()),
                                                     "Select, please", new { title = "Corresponding metadata node to be used for the Lucene index.", style = "width: 350px;" })

                                            </div>
                                            <div class="col-lg-1 text-left vcenter">
                                                <a class="removeMetadataNode " onclick="delete_node('node_container_@count')">
                                                    <span class="glyphicon glyphicon-remove-circle"></span>
                                                </a>
                                                <a onclick="add_composed_node('_nodes_@count')" title="Add Composed Node!">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </a>
                                            </div><br />
                                        </div>

                                    }

                                }
                                <br />
                            }
                        </div>
                    </td>
                    <br />
                    <td style="vertical-align:bottom;">
                        <div class="vcenter" style="width:55px;">
                            @*
                                    @Html.ActionLink(" ", "AddMetadataNode_", "Admin", new {
                                           id = "addNode",
                                           count = count ,
                                           @class = "bx-add bx-function",
                                           title = "Corresponding metadata node to be used for the Lucene index." }
                                    )

                                    @Html.ActionLink(" ", "AddMetadataNode_", "Admin",
                                           new { area = "ddm", count = count },
                                           new { @class = "bx-add bx-function", @id = "addNode", title = "Corresponding metadata node to be used for the Lucene index." })

                                @Html.ValidationMessageFor(m => m.metadataNames)
                            *@
                            <a id="add_node" class="add_node" onclick="add_node()" title="Add Node!">
                                <span class="bx-add bx-function"></span>
                            </a>
                        </div>
                    </td>
                </tr>

                <tr>
                    <td>
                        @(Html.LabelFor(m => m.headerItem))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.headerItem, new { title = "Tick if this item should be available as a category (e.g. as a grid column)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.defaultHeaderItem))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.defaultHeaderItem, new { title = "Tick if the header item should be visible upon page load." })
                    </td>
                </tr>

                <tr><td><h3>Type</h3></td></tr>

                <tr>
                    <td>
                        @(Html.LabelFor(m => m.searchType))<span class="bx bx-required" title="Required">
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.searchType, new SelectList(SearchComponentBaseType, Model.searchType), "Select, please")
                        <label title="Search pattern to be used for this item.">?</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.dataType))<span class="bx bx-required" title="Required">
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.dataType, new SelectList(DataType, Model.dataType), "Select, please", new { title = "Data type to be indexed." })
                    </td>
                </tr>
                <tr>
                    <td><h3>Index Parameters</h3></td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.store))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.store, new { title = "Tick to store the entire item value in addition to the index." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.multiValue))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.multiValue, new { title = "Tick if this item contains multiple values per field (e.g. Name A; Name B; Name C)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.analysed))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.analysed, new { title = "Tick if this item should be analyzed for the index (default)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.norm))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.norm)
                        <label title="....">?</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.boost))
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.boost, new { type = "number", min = "0.0", max = "10.0", title = "Specify the priority of this item within the search index (10=highest priority)." })
                    </td>
                </tr>
                <tr>
                    <td><h3>Property Parameters</h3></td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.uiComponent))
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.uiComponent, new SelectList(UiComponents, Model.uiComponent), new { title = "Choose a UI component Type according to the number of options (1-3  = item, 3-15 = list, >15= range)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.aggregationType))
                    </td>
                    <td>

                        @Html.DropDownListFor(m => m.aggregationType, new SelectList(AggregationTypes, Model.aggregationType), new { title = "Choose a selection type based how many choices should be allowed (single, multiple)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.direction))
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.direction, new SelectList(Directions, Model.direction), new { title = "Default sort direction for this item (ascending, descending)." })
                    </td>
                </tr>

            </table>
        }
    </div>

    <div class="bx-footer right">
        <button type="submit" value="Save" name="submit" class="bx-button action">Save</button>
        <button value="c" name="cancel" class="bx-button action" onclick="OnCancel()">Cancel</button>
    </div>

}




<script type="text/javascript">


    var run = false;
    $("#addNode").unbind().click(function () {
        $.ajax({
            url: this.href,
            cache: false,
            success: function (html) { $("#metadataNodes").append(html); }
        });

        return false;
    });

    $("a.removeMetadataNode").live("click", function () {
        $(this).parents("div.metadataNode:first").remove();
        return false;
    });

    function OnCancel() {
        var window = $('#EditSearchAttribute').data('tWindow');
        window.close();
    }

    function OnSuccess() {

        var window = $('#EditSearchAttribute').data('tWindow');
        window.close();

        @*$.post('@Url.Action("SearchDesigner", "Admin", new RouteValueDictionary { { "area", "ddm" } })', function (response) {
            $("body").html(response);
        })*@
    }

    function OnFailure(response) {
        alert("failed");
    }


    function delete_node(id) {
        id = "." + id;
        $(id).remove();
    }

    function add_composed_node(id) {
        id = "." + id;
        //alert(id);
        $.ajax({
            url: '/DDM/Admin/AddMetadataPartialNode',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            success: function (result) {
                if (result) {
                    //alert(result);
                    $(id).append(result);
                }
            }
        });
    }

    function add_node() {
        var lastId = 0;
        $('div')
            .filter(function () {
                //console.log(this.id.match(/node_container_/));
                if (this.id.match(/node_container_/)) {
                    console.log("match ==> " + this.id.match(/node_container_/).input);
                    divLastId = (this.id.match(/node_container_/).input);
                    lastId = divLastId.substring("node_container_".length, divLastId.length)
                }
            });
        console.log("last div id = " + lastId);
        console.log ($("div[id^='node_container_*']"));
        $.ajax({
            url: '/DDM/Admin/AddNewMetadataNode',
            type: 'POST',
            data: { 'count': lastId },
            success: function (result) {
                if (result) {
                    $('#metadataNodes').append(result);
                }
            }
        });
    }

    function Submit() {

        var metadatanodes = [];
        $('div').filter(function () {
            node_group = [];
            if (this.id.match(/_nodes_/)) {
                //console.log("match ==> " + this.id.match(/_nodes_/).input);
                var div = this.id.match(/_nodes_/).input;

                var selectedValueArray = $('.'+div+' select').map(function () {
                    return $(this).val();
                }).get();

                metadatanodes.push(selectedValueArray);
                //var select = $('#' + div).children('select').each(function () {
                //    item = {};
                //    item["node"] = $(this).val();
                //    node_group.push($(this).val());
                //    console.log("Matches on select = " + $(this).val());
                //});
            }
            //if (node_group.length != 0) {
            //    metadatanodes.push(node_group);
            //}
        });

        //var inputs = $('#Form_Edit_search :input');
        //var json = [];
        //inputs.each(function () {
        //    if (this.name != "metadataNodes") {
        //        //console.log("Match = "+this.name+" - "+ $(this).val());
        //        json[this.name] = $(this).val();
        //    }
        //
        //});
        
        //var inputs = [];
        //$('#Form_Edit_search input').each(
        //    function (index) {
        //        var input = $(this);
        //        var obj = `{"id" : `+ input.attr('id')+`,"type" :`+ input.attr('type') +`,"name" :`+ input.attr('name') +`,"Value" :`+ input.val() +`,}`;
        //        var obj_ = '{"id" : ' + input.attr('id') + ',"type" :' + input.attr('type') + ',"name" :' + input.attr('name') + ',"Value" :' + input.val() + ',}';
        //        obj_.replace(/\n/g, '');
        //        obj_.trim();
        //        inputs.push(obj_);
        //    }
        //);

        var form = $('#Form_Edit_search');
        var formDataa = $(form).serialize();
        var formData = unescape(formDataa);

        console.log("form data  : " + formData);
        console.log("results :  " + JSON.stringify(metadatanodes));
        
        $.ajax({
            url: '/DDM/Admin/save_new',
            data: { 'form': JSON.stringify(metadatanodes), 'inputs': formData },
            type: "POST",
            dataType: "json",
            success: function (result) {
                if (result) {
                    alert("success");
                    var window = $('#EditSearchAttribute').data('tWindow');
                    window.close();
                }
            },
            error: function (xhr) {
                alert('Error: ' + xhr);
            }
        });

    }

</script>


<style type="text/css">

    #searchAttributeForm {
        padding: 5px;
        background-color: white;
    }

        #searchAttributeForm div {
            padding-left: 0px;
        }

        #searchAttributeForm table,
        #searchAttributeForm td {
            /*border:none;*/
        }

    .searchAttributePart table, .searchAttributePart td, .searchAttributePart tr {
        border: none;
    }
</style>
