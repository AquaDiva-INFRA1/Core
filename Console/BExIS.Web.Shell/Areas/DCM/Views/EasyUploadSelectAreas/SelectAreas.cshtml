@model BExIS.Modules.Dcm.UI.Models.SelectAreasModel
@using Telerik.Web.Mvc.UI;
@using Telerik.Web.Mvc.Resources;
@using BExIS.Modules.Dcm.UI.Models;


<style>
    .areaSelect {
        padding: 5px 10px;
    }

    #setSelectedHeaderArea {
        background-color: rgba(102, 7, 5, 1) !important;
    }

    #setSelectDataArea {
        background-color: rgba(56, 5, 102, 1) !important;
    }

    #expandSelection {
        background-color: rgba(56, 5, 102, 1) !important;
    }

    .headerMarking {
        background-color: rgba(102, 7, 5, 0.5) !important;
    }

    .dataMarking {
        background-color: rgba(56, 5, 102, 0.5) !important;
    }

    /*Overwriting the css of the wizard*/
    #Step4 .uploadWizardStep_Main{
       width: 90%
    }
    #Step4 .uploadWizardStep_Content{
        height: auto;
    }

</style>

<script>
    if (typeof (hotActive) !== 'undefined') {
        //Another instance of the handsontable is defined, destroy it before creating a new one
        if (hotActive) {
            hot.destroy();
        }
    }

    var hot = null;
    var hotActive = false;
    var currentButton = null;
    var selectedDataArea = null;

    $(document).ready(function () {

        function resetRenderer(instance, td, row, col, prop, value, cellProperties) {

            Handsontable.renderers.TextRenderer.apply(this, arguments);

            cellProperties.editor = false;

            return td;
        }

        var container = document.getElementById('handsonExcelTable');
        hot = new Handsontable(container, {
            data: @Html.Raw(Model.JsonTableData),
            rowHeaders: true,
            colHeaders: true,
            contextMenu: false,
            width: 800,
            height: 400,
            outsideClickDeselects: false,
            cells: function(row, col, prop) {
                var cellProperties = {};
                cellProperties.renderer = resetRenderer;
                return cellProperties;
            }
        });

        hotActive = true;

        hot.render();


        $('#setSelectDataArea').click(function() {
            currentButton = "data";
            var selected = hot.getSelected();

            if(!jQuery.isEmptyObject(selected)) {

                // check if selection is from right bottom to left top and reverse it
                if(selected[2] <= selected[0] && selected[3] <= selected[1]) {
                    selected = reverseArea(selected);
                }
                selectedDataArea = selected;

                //Check if selection is from bottom to top and reverse it
                if(selected[0] > selected[2]){
                    selected = reverseAreaVertically(selected);
                }

                // set the css class for all selected cells
                markArea(selected[0], selected[2], selected[1], selected[3], 'dataMarking');


                // render table again
                hot.render();

                // save selection area
                currentButton = null;

                // push selection to the server
                $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { dataArea: JSON.stringify(selected) }, function (response) { });
            }
        });

        $('#setSelectedHeaderArea').click(function() {
            currentButton = "header";
            var selected = hot.getSelected();
            if(!jQuery.isEmptyObject(selected)) {

                // check if selection is from right bottom to left top and reverse it
                if(selected[2] <= selected[0] && selected[3] <= selected[1]) {
                    selected = reverseArea(selected);
                }

                // set the css class for all selected cells
                markArea(selected[0], selected[2], selected[1], selected[3], 'headerMarking');

                // render table again
                hot.render();

                // save selection area
                currentButton = null;

                // push selection to the server
                $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { headerArea: JSON.stringify(selected) }, function (response) { });
            }
        });

        $('#setSelectReset').click(function() {
            currentButton = "reset";

            var num_rows = hot.countRows();
            var num_cols = hot.countCols();

            selectedDataArea = null;

            //Reset all markings
            markArea(0, num_rows, 0, num_cols, '');

            $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { dataArea: "", headerArea: "" }, function (response) {});

            hot.render();

            currentButton = "null";
        });

        $('#expandSelection').click(function(){
            var selected = null;

            //If there is a marked data area we want to expand it
            if(!jQuery.isEmptyObject(selectedDataArea)) {
                selected = selectedDataArea;
            } else{
                //If there is no marked data area yet, we want to expand the current selection
                selected = hot.getSelected();
            }

            if(!jQuery.isEmptyObject(selected)) {
                // check if selection is from right bottom to left top and reverse it
                if(selected[2] <= selected[0] && selected[3] <= selected[1]) {
                    selected = reverseArea(selected);
                }

                //Select the cells to the end of the table
                hot.selectCell(selected[0], selected[1], hot.countRows() - 1, selected[3] );
                //Get the new selection
                selected = hot.getSelected();
                selectedDataArea = selected;

                // set the css class for all selected cells
                for(i = selected[0]; i <= selected[2]; i++) {
                    for(j = selected[1]; j <= selected[3]; j++) {
                        var cell = hot.getCellMeta(i,j, true);
                        cell.className = 'dataMarking';
                    }
                }

                // render table again
                hot.render();

                // save selection area
                currentButton = null;

                // push selection to the server
                $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { dataArea: JSON.stringify(selected) }, function (response) { });
            }
        });
        
        var array =  @Html.Raw(Json.Encode(Model.HeaderArea));
        if (array) {
            array = $.parseJSON(array);
            markArea(array[0], array[2], array[1], array[3], 'headerMarking');
        }    

        //If there was a previous selection, parse it and mark the cells
        var nestedArray =  @Html.Raw(Json.Encode(Model.DataArea));
        if (nestedArray != null){
            for(var pos = 0; pos < nestedArray.length; pos++){
                var array = $.parseJSON(nestedArray[pos]);
                markArea(array[0], array[2], array[1], array[3], 'dataMarking');
            }
        }
        hot.render();
    });

    /*
    *Marks the area specified by the parameters by setting the class name
    */
    function markArea(startX, endX, startY, endY, type) {
        for (i = startX; i <= endX; i++) {
            for (j = startY; j <= endY; j++) {
                var cell = hot.getCellMeta(i, j, true);
                cell.className = type;

            }
        }
    }

    function reverseArea(selected) {
        var startCol = selected[3];
        var startRow = selected[2];
        var endCol = selected[1];
        var endRow = selected[0]

        return [startRow, startCol, endRow, endCol];
    }

    function reverseAreaVertically(selected){
        var startCol = selected[1];
        var startRow = selected[2];
        var endCol = selected[3];
        var endRow = selected[0];

        return [startRow, startCol, endRow, endCol];
    }
</script>

<div id="Step4" class="uploadWizardStep">

    <div class="uploadWizardStep_Main">
        <div class="uploadWizardStep_Header stepper">
            <h3>@Model.StepInfo.title</h3>
        </div>

        <div class="uploadWizardStep_Description stepper">
            <p>Please mark your header (the names of the variables) and data area.</p>
        </div>

        <div class="uploadWizardStep_Content stepper">
            <button type="button" class="t-button action areaSelect" id="setSelectedHeaderArea">Header</button>

            <button type="button" class="t-button action areaSelect" id="setSelectDataArea">Data</button>

            <button type="button" class="t-button action areaSelect" id="expandSelection" title="Expand the latest marked data-area vertically to the end of the table.">Expand Selection</button>

            <button type="button" class="t-button action areaSelect" id="setSelectReset">Reset</button>

            <button type="button" class="t-button action areaSelect" id="changeWorksheet">change Worksheet</button>
            
            <div id="handsonExcelTable" style="margin-bottom: 2em"></div>
            
        </div>

        <div class="uploadWizardStep_Error stepper">
            @if (Model != null)
            {
                if (Model.ErrorList != null)
                {
                    if (Model.ErrorList.Count != 0)
                    {
                        <ul>
                            @foreach (BExIS.IO.Transform.Validation.Exceptions.Error s in @Model.ErrorList)
                            {
                                <li>@s.ToString()</li>
                            }
                        </ul>

                    }
                }

            }
        </div>
    </div>
</div>


<script type="text/javascript">


    $("#setSelectedHeaderArea").click(function () {
        if ($(this).val() != null && $(this).val() != '') {
            SelectedSheetFormat = $(this).val();


        }
    })


</script>
