@model BExIS.Modules.Dcm.UI.Models.SelectAreasModel
@using Telerik.Web.Mvc.UI;
@using Telerik.Web.Mvc.Resources;
@using BExIS.Modules.Dcm.UI.Models;


<style>
    .selectAreasButton {
        padding: 5px 10px;
    }

    #setSelectedHeaderArea {
        background-color: rgba(102, 7, 5, 1) !important;
    }

    #setSelectDataArea {
        background-color: rgba(56, 5, 102, 1) !important;
    }

    #expandSelection {
        background-color: rgba(56, 5, 102, 1) !important;
    }

    .headerMarking {
        background-color: rgba(102, 7, 5, 0.5) !important;
    }

    .dataMarking {
        background-color: rgba(56, 5, 102, 0.5) !important;
    }

    #tableControlRight{
        float: right;
    }

    #tableControlRight select{
        max-width: 150px;
        text-overflow: ellipsis;
    }

    /*Overwriting the css of the wizard*/
    #Step4 .uploadWizardStep_Main {
        width: 90%
    }
    #Step4 .uploadWizardStep_Content{
        height: auto;
    }

</style>

<div id="Step4" class="uploadWizardStep">

    <div class="uploadWizardStep_Main">
        <div class="uploadWizardStep_Header stepper">
            <h3>@Model.StepInfo.title</h3>
        </div>

        <div class="uploadWizardStep_Description stepper">
            <p>Please mark your header (the names of the variables) and data area.</p>
        </div>

        <div class="uploadWizardStep_Content stepper">
            <div style="margin-bottom: 1em">
                <button type="button" class="t-button action selectAreasButton" id="setSelectedHeaderArea">Header</button>

                <button type="button" class="t-button action selectAreasButton" id="setSelectDataArea">Data</button>

                <button type="button" class="t-button action selectAreasButton" id="expandSelection" title="Expand the latest marked data-area vertically to the end of the table.">Expand Selection</button>

                <button type="button" class="t-button action selectAreasButton" id="setSelectReset">Reset</button>

                <div id="tableControlRight">
                    @{ 
                        SelectListItem tmp;
                        List<SelectListItem> listItems = new List<SelectListItem>();
                        foreach (KeyValuePair<Uri, String> worksheetIdentifier in Model.SheetUriDictionary)
                        {
                            tmp = new SelectListItem
                            {
                                Text = worksheetIdentifier.Value,
                                Value = worksheetIdentifier.Key.ToString(),
                                Selected = (worksheetIdentifier.Key.ToString() == Model.activeSheetUri)
                            };
                            listItems.Add(tmp);
                        }
                    }
                    @Html.DropDownList("Sheet Select", listItems, "Select", new { @class = "buttonsRight", @id = "sheetSelect" })
                    <button type="button" class="t-button action selectAreasButton" id="changeWorksheet">Change Worksheet</button>
                </div>
            </div>
            
            <div id="handsonExcelTable" style="margin-bottom: 2em"></div>
            
        </div>

        <div class="uploadWizardStep_Error stepper">
            @if (Model != null && Model.ErrorList != null && Model.ErrorList.Count != 0)
            {
                <ul>
                    @foreach (BExIS.IO.Transform.Validation.Exceptions.Error s in @Model.ErrorList)
                {
                        <li>@s.ToString()</li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

<script>
    var hot = null;
    var hotActive = false;
    var currentButton = null;
    var selectedDataArea = null;
    var markedAreas = [];

    $(document).ready(function () {
        if (typeof (hotActive) !== 'undefined') {
            //Another instance of the handsontable is defined, destroy it before creating a new one
            if (hotActive) {
                hot.destroy();
            }
        }

        var container = document.getElementById('handsonExcelTable');
        var hotData = @Html.Raw(Model.JsonTableData);
        hot = createHandsontableForData(hotData, container);
        hot.render();

        $('#setSelectDataArea').click(function() {
            currentButton = "data";
            var selected = hot.getSelected();

            if(!jQuery.isEmptyObject(selected)) {

                // check if selection is from right bottom to left top and reverse it
                if(selected[2] <= selected[0] && selected[3] <= selected[1]) {
                    selected = reverseArea(selected);
                }

                //Check if selection is from bottom to top and reverse it vertically
                if(selected[0] > selected[2]){
                    selected = reverseAreaVertically(selected);
                }

                //Check if selection is from right to left and reverse it horizontally
                if (selected[3] <= selected[1]) {
                    selected = reverseAreaHorizontally(selected);
                }

                //Only mark and save if the marked area is not intersecting an area that's marked differently
                if (!intersectsDifferentMarking(selected[0], selected[1], selected[2], selected[3], 'dataMarking')) {
                    selectedDataArea = selected;

                    // set the css class for all selected cells
                    markArea(selected[0], selected[1], selected[2], selected[3], 'dataMarking');


                    // render table again
                    hot.render();

                    // save selection area
                    currentButton = null;

                    // push selection to the server
                    $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { dataArea: JSON.stringify(selected) }, function (response) { });
                }
            }
        });

        $('#setSelectedHeaderArea').click(function() {
            currentButton = "header";
            var selected = hot.getSelected();
            if(!jQuery.isEmptyObject(selected)) {

                // check if selection is from right bottom to left top and reverse it
                if (selected[2] <= selected[0] && selected[3] <= selected[1]) {
                    selected = reverseArea(selected);
                }

                //Check if selection is from bottom to top and reverse it vertically
                if (selected[0] > selected[2]) {
                    selected = reverseAreaVertically(selected);
                }

                //Check if selection is from right to left and reverse it horizontally
                if (selected[3] <= selected[1]) {
                    selected = reverseAreaHorizontally(selected);
                }

                //Only mark and save if the marked area is not intersecting an area that's marked differently
                if (!intersectsDifferentMarking(selected[0], selected[1], selected[2], selected[3], 'headerMarking')) {

                    //Check if there's already a marked header
                    var exIndex = markedAreas.findIndex(function (el) {
                        return el[4] == 'headerMarking';
                    });

                    if (exIndex > -1) {
                        //We found an already marked area, reset its marking and remove it from the list of marked areas
                        var exArea = markedAreas[exIndex];
                        markArea(exArea[0], exArea[1], exArea[2], exArea[3], '');
                        markedAreas.splice(exIndex, 1);
                    }

                    $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { headerArea: JSON.stringify(selected) }, function (response) {
                    });

                    // set the css class for all selected cells
                    markArea(selected[0], selected[1], selected[2], selected[3], 'headerMarking');

                    // render table again
                    hot.render();

                    // save selection area
                    currentButton = null;
                }
            }
        });

        $('#setSelectReset').click(function() {
            currentButton = "reset";

            var num_rows = hot.countRows();
            var num_cols = hot.countCols();

            selectedDataArea = null;

            //Reset all markings
            markArea(0, 0, num_rows, num_cols, '');
            markedAreas = [];

            $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { dataArea: "", headerArea: "" }, function (response) {});

            hot.render();

            currentButton = "null";
        });

        $('#expandSelection').click(function(){
            var selected = null;

            //If there is a marked data area we want to expand it
            if(!jQuery.isEmptyObject(selectedDataArea)) {
                selected = selectedDataArea;
            } else{
                //If there is no marked data area yet, we want to expand the current selection
                selected = hot.getSelected();
            }

            if(!jQuery.isEmptyObject(selected)) {
                // check if selection is from right bottom to left top and reverse it
                if (selected[2] <= selected[0] && selected[3] <= selected[1]) {
                    selected = reverseArea(selected);
                }

                //Check if selection is from bottom to top and reverse it vertically
                if (selected[0] > selected[2]) {
                    selected = reverseAreaVertically(selected);
                }

                //Check if selection is from right to left and reverse it horizontally
                if (selected[3] <= selected[1]) {
                    selected = reverseAreaHorizontally(selected);
                }

                //Save old selection in case the marking is not sucessfull because of an intersection
                var oldSelection = selected;
                //Select the cells to the end of the table
                hot.selectCell(selected[0], selected[1], hot.countRows() - 1, selected[3] );
                //Get the new selection
                selected = hot.getSelected();

                //Only mark and save if the marked area is not intersecting an area that's marked differently
                if (!intersectsDifferentMarking(selected[0], selected[1], selected[2], selected[3], 'dataMarking')) {
                    selectedDataArea = selected;

                    //Mark the selected cells as data
                    markArea(selected[0], selected[1], selected[2],  selected[3], 'dataMarking');

                    // render table again
                    hot.render();

                    // save selection area
                    currentButton = null;

                    // push selection to the server
                    $.post('@Url.Action("SelectedAreaToBus", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { dataArea: JSON.stringify(selected) }, function (response) { });
                } else {
                    //Restore old selection
                    hot.selectCell(oldSelection[0], oldSelection[1], oldSelection[2], oldSelection[3]);
                }
            }
        });

        $('#changeWorksheet').click(function () {
            //Grab the sheet identifier
            var selVal = $('#sheetSelect').val();
            if (selVal != null && selVal != "") {
                //Show a spinner & disable the button - making sure the button is not resized by setting min-width and -height
                var button = this;
                $(button).prop('disabled', true);
                var oldHtml = $(button).html();
                var curWidth = $(button).outerWidth();
                var curHeight = $(button).outerHeight();
                $(button).css({
                    "min-width": curWidth.toString() + "px",
                    "min-height": curHeight.toString() + "px"
                });
                $(button).html('<i class="fa fa-spinner fa-spin fa-fw"></i><span class="sr-only">Loading...</span>');

                //Request the new sheet
                $.post('@Url.Action("ChangeWorksheet", "EasyUploadSelectAreas", new RouteValueDictionary { { "area", "DCM" } })', { sheetIdentifier: selVal }, function (response) {
                    //Restore old button content
                    $(button).html(oldHtml);
                    $(button).prop('disabled', false);

                    //Reset the markings that are stored on the bus
                    $('#setSelectReset').click();
                    //Get the container that
                    var container = document.getElementById('handsonExcelTable');
                    hot = createHandsontableForData(JSON.parse(response), container);
                    hot.render();
                });
            }
        });

        var array =  @Html.Raw(Json.Encode(Model.HeaderArea));
        if (array) {
            array = $.parseJSON(array);
            markArea(array[0], array[1], array[2],  array[3], 'headerMarking');
        }

        //If there was a previous selection, parse it and mark the cells
        var nestedArray =  @Html.Raw(Json.Encode(Model.DataArea));
        if (nestedArray != null){
            for(var pos = 0; pos < nestedArray.length; pos++){
                var array = $.parseJSON(nestedArray[pos]);
                markArea(array[0], array[1], array[2], array[3], 'dataMarking');
            }
        }
        hot.render();
    });

    function createHandsontableForData(data, container) {
        if (typeof (hotActive) !== 'undefined') {
            //Another instance of the handsontable is defined, destroy it before creating a new one
            if (hotActive) {
                hot.destroy();
            }
        }

        //Define the renderer
        resetRenderer = function (instance, td, row, col, prop, value, cellProperties) {

            Handsontable.renderers.TextRenderer.apply(this, arguments);

            cellProperties.editor = false;

            return td;
        }

        //The handsontable will be active after this function returns
        hotActive = true;

        //Create the actual table
        return new Handsontable(container, {
            data: data,
            rowHeaders: true,
            colHeaders: true,
            contextMenu: false,
            width: 800,
            height: 400,
            outsideClickDeselects: false,
            cells: function (row, col, prop) {
                var cellProperties = {};
                cellProperties.renderer = resetRenderer;
                return cellProperties;
            }
        });
    }

    /*
    *Marks the area specified by the parameters by setting the class name
    */
    function markArea(startX, startY, endX, endY, type) {
        if (type == "") {
            //type "" means no marking, so remove this area from the markedAreas-Array
            var exIndex = markedAreas.findIndex(function (el, startX, startY, endX, endY) {
                return (el[0] == startX &&
                    el[1] == startY &&
                    el[2] == endX &&
                    el[3] == endY);
            });
            if (exIndex > -1) {
                markedAreas.splice(exIndex, 1);
            }
        } else {
            //Any other type means it's marked, so add the area to the array
            markedAreas.push([startX, startY, endX, endY, type]);
        }

        //Set the class so the css will set the correct color
        for (i = startX; i <= endX; i++) {
            for (j = startY; j <= endY; j++) {
                var cell = hot.getCellMeta(i, j, true);
                cell.className = type;
            }
        }
    }

    function intersectsDifferentMarking(startX, startY, endX, endY, type) {
        for (var i = 0; i < markedAreas.length; i++) {
            oldArea = markedAreas[i]; //oldArea[0] => startX, [1] => startY, [2] => endX, [3] => endY, [4] => type
            if (oldArea[4] != type) {
                //Different marking, now check intersection (rectangle intersection, see https://stackoverflow.com/a/13390495)
                if ( !(endX < oldArea[0] || oldArea[2] < startX || endY < oldArea[1] || oldArea[3] < startY) ){
                    return true;
                }
            }
        }
        return false;
    }

    function reverseArea(selected) {
        var startCol = selected[3];
        var startRow = selected[2];
        var endCol = selected[1];
        var endRow = selected[0]

        return [startRow, startCol, endRow, endCol];
    }

    function reverseAreaVertically(selected){
        var startCol = selected[1];
        var startRow = selected[2];
        var endCol = selected[3];
        var endRow = selected[0];

        return [startRow, startCol, endRow, endCol];
    }

    function reverseAreaHorizontally(selected) {
        var startRow = selected[0];
        var startCol = selected[3];
        var endCol = selected[1];
        var endRow = selected[2];

        return [startRow, startCol, endRow, endCol];
    }
</script>