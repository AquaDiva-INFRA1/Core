@model MetadataAttributeModel
@using System
@using BExIS.Web.Shell.Areas.DCM.Models
@using Telerik.Web.Mvc.UI

@{
    string id = Model.Id + "_" + Model.Parent.Id + "_" + Model.Number + "_" + Model.ParentModelNumber + "_" + Model.NumberOfSourceInPackage;
    string idInput = id + "_Input";
    string idAdd = id + "_Add";
    string idRemove = id + "_Remove";
    string idUp = id + "_Up";
    string idDown = id + "_Down";

    string displayName = Model.DisplayName;
    DateTime defaultDate = DateTime.Today;

    if (Model.Number > 1)
    {
        displayName += " " + Model.Number;
    }
}

<tr id="@id" class="metadataAttributeContent">

   
    @if (@Model != null)
    {

                    <td class="attributeInfo">
                        @if (Model.MinCardinality > 0)
                        { 
                          <b title="Required" style="color:red">*</b>
                        }
                    </td>    

                    <td class="attributeName">
                        <b title="@Model.Discription">@displayName</b>
                    </td>
                    <td class="attributeValue">

                        @if (Model.SystemType.Equals(TypeCode.String.ToString()))
                        {
                            if (Model.DataType.Equals("Text"))
                            {
                                if (Model.DomainList.Count == 0)
                                {
                                    @Html.TextAreaFor(m => m.Value, new { OnChange = "OnChange(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @Model.Parent.Label, @class = "ValueClass bx-input" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(m => m.Value, new SelectList(Model.DomainList),"Select, please", new { OnChange = "OnChange(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @Model.Parent.Label, @class = "ValueClass  bx-dropdown" })
                                }

                            }

                            if (Model.DataType.Equals("String"))
                            {
                                if (Model.DomainList.Count == 0)
                                { 
                                    @Html.TextBoxFor(m => m.Value, new { OnChange = "OnChange(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @Model.Parent.Label, @class = "ValueClass bx-input" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(m => m.Value, new SelectList(Model.DomainList), "Select, please", new { OnChange = "OnChange(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @Model.Parent.Label, @class = "ValueClass bx-input" })
                                }
                            }
                        }

                        @if (Model.SystemType.Equals(TypeCode.Boolean.ToString()))
                        {
                               @Html.CheckBox(Model.DisplayName, new { OnChange = "OnChange(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @Model.Parent.Label, @class = "ValueClass" });
                        }

                        @if (Model.SystemType.Equals(TypeCode.Int32.ToString()) ||
                             Model.SystemType.Equals(TypeCode.Int64.ToString())
                            )
                        {
                              int value = 0;
                              value = Convert.ToInt32(Model.Value);

                               @(Html.Telerik().IntegerTextBox()
                                              .Name(idInput)
                                              .MinValue(0)
                                              .MaxValue(Int32.MaxValue)
                                              .Value(value)
                                              .ClientEvents(events => events
                                                .OnChange("OnChangeNumbers"))
                                              .InputHtmlAttributes(new { PackageId = @Model.Parent.Id, Title = @Model.Parent.Label,@class = "ValueNumberClass"})
                                              )
                        }

                        @if (Model.SystemType.Equals(TypeCode.Decimal.ToString())||
                            Model.SystemType.Equals(TypeCode.Double.ToString()))
                        {
                             @* var value = 0.0;
                              value = Convert.ToDouble(Model.Value);

                               @(Html.Telerik().NumericTextBox()
                                              .Name(idInput)
                                              .MinValue(0)  
                                              .MaxValue(double.MaxValue)
                                              .Spinners(false)
                                              .Value(value)
                                              .ClientEvents(events => events
                                                .OnChange("OnChangeNumbers"))
                                              .HtmlAttributes(new { PackageId = @Model.Parent.Id, Title = @Model.Parent.Label, @class = "ValueNumberClass"})
                                              )*@
                            
                           @Html.TextBoxFor(m => m.Value, new { OnChange = "OnChange(this)", Name = @displayName, Id = @idInput, PackageId = @Model.Parent.Id, Title = @Model.Parent.Label, @class = "ValueClass bx-input" })

                        }


                        @if (Model.SystemType.Equals(TypeCode.DateTime.ToString()))
                        {
                            string value = "";
                            if (Model.Value != null)
                            {
                                value = Model.Value.ToString();
                            }
                            else
                            {
                                value = "";//@defaultDate.ToString();
                            }
                            
                            @(Html.Telerik().DatePicker()
                                .Name(@idInput)
                                .ShowButton(true)
                                .TodayButton("d")
                                .OpenOnFocus(true)
                                .Format("dd/MM/yyyy")
                                .Value(value)
                                .ClientEvents(events => events
                                    .OnChange("OnChangeDatePicker"))
                            )
                        }

                    </td>
                    <td class="attributeMessage">
                        @Html.ValidationMessageFor(m => m.Value)
                    </td>

                    if (Model.MaxCardinality > 1)
                    {

                        <td>
                            <button id="@idAdd" type="button" value="Add" name="Add"  class="t-icon t-add" style="border:0px;" onclick="OnClickAdd(this)">add</button>
                        </td>
                       
                        <td>
                            <button id="@idRemove" type="button" value="Remove" name="Remove"  class="t-icon t-delete" style="border:0px;" onclick="OnClickRemove(this)">remove</button>
                        </td>
                        
                        if (!Model.first)
                        {
                            <td>
                                <button id="@idUp" type="button" value="Up" name="Up"  class="t-icon t-arrow-up" style="border:0px;" onclick="OnClickUp(this)">up</button>
                            </td>
                        }

                        if (!Model.last)
                        { 
                            <td>
                                <button id="@idDown" type="button" value="Down" name="Down"  class="t-icon t-arrow-down" style="border:0px;" onclick="OnClickDown(this)">down</button>
                            </td>
                        }
                    }

                    @*if (!String.IsNullOrEmpty(Model.ConstraintDescription))
                    {
                      
                        <td>
                            <label title="@Model.ConstraintDescription">?</label>
                        </td>
                    }*@
                    


    }
    else
    { 
    <b>null</b>
    }
</tr> 
     

<script type="text/javascript">
   
    $(document).ready(function ()
    {
        resetAllTelerikIconTitles();
    });


    function OnChange(e)
    {
        var substr = e.id.split('_');
        var id = substr[0];
        var parentid = substr[1];
        var parentname = $("#" + e.id).attr("title");
        var number = substr[2];
        var ParentModelNumber = substr[3];
        

        var data = {
            value: e.value,
            id: id,
            parentid: parentid,
            parentname: parentname,
            number: number,
            parentModelNumber :ParentModelNumber
        };

        //alert(id);
        //alert(parentid);
        //alert(metadataStructureId);
        //alert(number);

        $.ajax({
            url: '/DCM/CreateSetMetadataPackage/ValidateMetadataAttributeUsage',
            type: 'POST',
            data: JSON.stringify(data),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                //alert('Error: ' + xhr.statusText);
            },
            success: function (result) {
                //alert("success");
            },
            async: true,
            processData: false
        });
    }

    function OnChangeNumbers(e) {

        var substr = e.target.id.split('_');
        var id = substr[0];
        var parentid = substr[1];
        var parentname = e.target.attr("title");
        var metadataStructureId = substr[2];
        var number = substr[3];
        var ParentModelNumber = substr[4];


        var data = {
            value: e.target.value,
            id: id,
            parentid: parentid,
            parentname: parentname,
            number: number,
            ParentModelNumber: ParentModelNumber
        };

        //alert(id);
        //alert(parentid);
        //alert(metadataStructureId);
        //alert(number);

        $.ajax({
            url: '/DCM/CreateSetMetadataPackage/ValidateMetadataAttributeUsage',
            type: 'POST',
            data: JSON.stringify(data),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                //alert('Error: ' + xhr.statusText);
            },
            success: function (result) {
                //alert("success");
            },
            async: true,
            processData: false
        });
    }

    function OnChangeDatePicker(e) {


        var substr = e.target.id.split('_');
        var id = substr[0];
        var parentid = substr[1];
        var parentname = $("#" + e.id).attr("title");
        //var metadataStructureId = substr[2];
        var number = substr[2];
        var ParentModelNumber = substr[3];

        var data = {
            value: e.value,
            id: id,
            parentid: parentid,
            parentname: parentname,
            number: number,
            ParentModelNumber: ParentModelNumber
        };

        //alert(id);
        //alert(parentid);
        //alert(metadataStructureId);
        //alert(number);

        $.ajax({
            url: '/DCM/CreateSetMetadataPackage/ValidateMetadataAttributeUsage',
            type: 'POST',
            data: JSON.stringify(data),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                //alert('Error: ' + xhr.statusText);
            },
            success: function (result) {
                //alert("success");
            },
            async: true,
            processData: false
        });
    }

    function OnClickAdd(e)
    {
        
        var substr = e.id.split('_');
        var id = substr[0];
        var parentid = substr[1];
        var number = substr[2];
        var ParentModelNumber = substr[3];
        var NumberOfSourceInPackage = substr[4];
        
        @*alert("AddClick -" +e.id +" - "+NumberOfSourceInPackage+" <= "+'@Model.Source.MaxCardinality');
        alert("id -"+id);
        alert("parentid -" + parentid);
        alert("metadataStructureId -" + metadataStructureId);
        alert("number -" + number);
        alert("ParentModelNumber -" + ParentModelNumber);
        alert("NumberOfSourceInPackage -" + NumberOfSourceInPackage);*@
        
        var maxcardinality = '@Model.Source.MaxCardinality';

        if (NumberOfSourceInPackage <= parseInt(maxcardinality)) {
            $.post('@Url.Action("AddMetadataAttributeUsage", "CreateSetMetadataPackage", new RouteValueDictionary { { "area", "DCM" } })', { id: id, parentid: parentid, number: number, parentModelNumber: ParentModelNumber }, function (response) {

                var id = parentid;
                $("#" + id).replaceWith(response);
            })
        }
        else {
            alert("Maxium cardinality is reached.");
        }
    }

    function OnClickRemove(e)
    {
       
        var value = $("#" + e.id).closest(".ValueClass").value;

        if (value != "") {

            var substr = e.id.split('_');
            var id = substr[0];
            var parentid = substr[1];
            var number = substr[2];
            var ParentModelNumber = substr[3];
            var NumberOfSourceInPackage = substr[4];

         
            if (NumberOfSourceInPackage > 1) {
                var data = {
                    value: value,
                    id: id,
                    parentid: parentid,
                    number: number,
                    ParentModelNumber: ParentModelNumber
                };

                $.post('@Url.Action("RemoveMetadataAttributeUsage", "CreateSetMetadataPackage", new RouteValueDictionary { { "area", "DCM" } })', { id: id, parentid: parentid, number: number, parentModelNumber: ParentModelNumber }, function (response) {

                    var id = parentid;
                    $("#" + id).replaceWith(response);
                })
            }
            else {
                alert("You are not able to remove elements.");
            }
        }
    }

    function OnClickUp(e)
    {
        //alert(value);
        var value = $("#" + e.id).closest(".ValueClass").value;
        if (value != "") {

            var substr = e.id.split('_');
            var id = substr[0];
            var parentid = substr[1];
            var number = substr[2];
            var ParentModelNumber = substr[3];



            var data = {
                value: value,
                id: id,
                parentid: parentid,
                number: number,
                ParentModelNumber:ParentModelNumber
            };

            $.post('@Url.Action("UpMetadataAttributeUsage", "CreateSetMetadataPackage", new RouteValueDictionary { { "area", "DCM" } })', { id: id, parentid: parentid, number: number, ParentModelNumber: ParentModelNumber }, function (response) {
     
                var id = parentid;
                $("#" + id).replaceWith(response);
            })

        }
    }

    function OnClickDown(e) {
        //alert(value);
        var value = $("#" + e.id).closest(".ValueClass").value;
        if (value != "") {

            var substr = e.id.split('_');
            var id = substr[0];
            var parentid = substr[1];
            var number = substr[2];
            var ParentModelNumber = substr[3];

            var data = {
                value: value,
                id: id,
                parentid: parentid,
                number: number,
                ParentModelNumber: ParentModelNumber
            };

            $.post('@Url.Action("DownMetadataAttributeUsage", "CreateSetMetadataPackage", new RouteValueDictionary { { "area", "DCM" } })', { id: id, parentid: parentid, number: number, ParentModelNumber: ParentModelNumber }, function (response) {

                var id = parentid;
                $("#" + id).replaceWith(response);
            })

        }
    }

</script>

<style type="text/css">

    .attributeInfo
    {
        width:10px;
    }

    .attributeName
    {
        width:80px;
    }

    .attributeValue
    {
        width:200px;
    }

    .ValueClass
    {
        max-width:300px;
        max-height:100px;
    }

    .ValueNumberClass
    {
         max-height:100px;
         width:30px;
    }

</style>