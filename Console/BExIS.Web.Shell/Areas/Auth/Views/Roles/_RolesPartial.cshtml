@using Telerik.Web.Mvc.UI
@using BExIS.Web.Shell.Areas.Auth.Models;

@model List<RoleModel>

@(Html.Telerik().Grid(Model)
        .Name("Grid_Roles")
        .DataKeys(keys =>
        {
            keys.Add(r => r.Id);
        })
        .ToolBar(command =>
            {
                command.Custom().Name("Create").Text("New Role").Ajax(true).ButtonType(GridButtonType.ImageAndText).ImageHtmlAttributes(new { @class = "t-icon t-add" });
            })
        .Columns(columns =>
        {
            columns.Command(command =>
            {
                command.Custom("Details").Ajax(true).ButtonType(GridButtonType.BareImage).ImageHtmlAttributes(new { @class = "t-icon t-edit" });
                command.Custom("Delete").Ajax(true).ButtonType(GridButtonType.BareImage).ImageHtmlAttributes(new { @class = "t-icon t-delete" });
            }).Title("Actions").Width(90).HtmlAttributes(new { style = "text-align:left" });
            columns.Bound(r => r.Id).Width(100);
            columns.Bound(r => r.RoleName).Width(250);
            columns.Bound(r => r.Description);
            columns.Bound(r => r.Comment);
        })
        .ClientEvents(clientEvents => clientEvents.OnCommand("onCommand"))
        .DataBinding(dataBinding => dataBinding
            .Ajax()
            .Select("Roles_Select", "Roles")
        )
        .Filterable()
        .Sortable(sortable => sortable
            .OrderBy(orderby => orderby
                .Add(r => r.Id).Descending()))
        .Scrollable(scrollable => scrollable.Height(500))
)

@(Html.Telerik().Window()
    .Name("windowCreation")
    .Title("Role Creation")
    .Draggable(true)
    .Modal(true)
    .Visible(false)
    .Scrollable(true)
    .Content(@<text>
        <div id="contentWindowCreation"></div>
    </text>)
    .ClientEvents(clientEvents => clientEvents
        .OnActivate("onActivateWindowCreation")
        .OnClose("onCloseWindowCreation")
    )
)

@(Html.Telerik().Window()
    .Name("windowDetails")
    .Title("Role Details")
    .Draggable(true)
    .Modal(true)
    .Visible(false)
    .Content(@<text>
        <div id="contentWindowDetails"></div>
    </text>)
    .ClientEvents(clientEvents => clientEvents
        .OnActivate("onActivateWindowDetails")
        .OnClose("onCloseWindowDetails")
    )
)

@(Html.Telerik().Window()
    .Name("windowDeletion")
    .Title("Role Deletion")
    .Draggable(true)
    .Modal(true)
    .Visible(false)
    .Content(@<text>
        <div id="contentWindowDeletion"></div>
    </text>)
    .ClientEvents(clientEvents => clientEvents
        .OnActivate("onActivateWindowDeletion")
        .OnClose("onCloseWindowDeletion")
    )
)

<script type="text/javascript">

    function setMembership(value, userid, roleid) {
        if (value) {
            $.post('@Url.Action("AddUserToRole", "Roles")', { UserId: userid, RoleId: roleid });
        } else {
            $.post('@Url.Action("RemoveUserFromRole", "Roles")', { UserId: userid, RoleId: roleid });
        }
    }

    function onCommand(e) {

        if (e.name == "Create") {

            $('#contentWindowCreation').load('@Url.Action("Create", "Roles")');

            var windowCreation = $('#windowCreation').data('tWindow');
            windowCreation.center().open();
        }

        if (e.name == "Details") {
            var roleID = e.dataItem.Id;

            $.get('@Url.Action("Details", "Roles")', { Id: roleID }, function (data) {

                $('#contentWindowDetails').html(data);
            });

            $.get('@Url.Action("RoleInfo", "Roles")', { Id: roleID }, function (data) {

                $('#contentTabstripRoleInfo').html(data);
            });

            var windowDetails = $('#windowDetails').data('tWindow');
            windowDetails.center().open();
        }

        if (e.name == "Delete") {
            var roleID = e.dataItem.Id;

            $.get('@Url.Action("Delete", "Roles")', { Id: roleID }, function (data) {

                $('#contentWindowDeletion').html(data);
            });

            var windowDeletion = $('#windowDeletion').data('tWindow');
            windowDeletion.center().open();
        }
    }

    //
    //
    // Create
    function cancelWindowCreation() {
        var windowCreation = $('#windowCreation').data('tWindow');
        windowCreation.close();
    }

    function onActivateWindowCreation() {
        var windowCreationContent = $('#windowCreation .t-window-content');

        windowCreationContent.css("height", "auto");
        windowCreationContent.css("width", "auto");
    }

    function onCloseWindowCreation() {
        $('#contentWindowCreation').empty();
        window.location.href = '@Url.Action("Roles", "Roles")';
    }

    //
    //
    // Details
    function cancelRoleEdit(e) {
        $.get('@Url.Action("RoleInfo", "Roles")', { Id: e }, function (data) {
                $('#contentTabstripRoleInfo').html(data);
            });
        }

        function editRoleInfo(e) {
            $.get('@Url.Action("RoleEdit", "Roles")', { Id: e }, function (data) {
            $('#contentTabstripRoleInfo').html(data);
        });
    }

    function onActivateWindowDetails(e) {
        var windowDetails = $('#windowDetails .t-window-content');

        windowDetails.css("height", "auto");
        windowDetails.css("width", "auto");
    }

    function onCloseWindowDetails(e) {
        $('#contentWindowDetails').empty();
        window.location.href = '@Url.Action("Roles", "Roles")';
    }

    function onSelectTabstripDetails(e, roleID) {
        var tab = $(e.item);

        switch (tab.index()) {
            case 0:
                $.get('@Url.Action("RoleInfo", "Roles")', { Id: roleID }, function (data) {
                    $('#contentTabstripRoleInfo').html(data);
                });
                $('#contentTabstripMembership').empty();
                break;

            case 1:
                $.get('@Url.Action("Membership", "Roles")', { Id: roleID }, function (data) {
                    $('#contentTabstripMembership').html(data);
                });
                $('#contentTabstripRoleInfo').empty();
                break;

            default:
                break;
        }
    }

    //
    //
    // Delete
    function cancelWindowDeletion() {
        var windowDeletion = $('#windowDeletion').data('tWindow');
        windowDeletion.close();
    }

    function onCloseWindowDeletion() {
        $('#contentWindowDeletion').empty();
        window.location.href = '@Url.Action("Roles", "Roles")';
    }

    function onActivateWindowDeletion(e) {
        var windowDeletion = $('#windowDeletion .t-window-content');

        windowDeletion.css("height", "auto");
        windowDeletion.css("width", "auto");
    }

    //
    //
    // Info
    function confirmWindowInfo(e) {
        switch (e) {
            case "windowDeletion":
                var windowDelete = $('#windowDeletion').data('tWindow');
                windowDelete.close();
                break;

            case "windowDetails":
                var windowDetails = $('#windowDetails').data('tWindow');
                windowDetails.close();
                break;

            case "windowCreation":
                var windowCreation = $('#windowCreation').data('tWindow');
                windowCreation.close();
                break;

            default:
                break;
        }
    }

    //
    //
    // RESET FORM JQUERY CODE!!!!!
    (function ($) {

        //re-set all client validation given a jQuery selected form or child
        $.fn.resetValidation = function () {

            var $form = this.closest('form');

            //reset jQuery Validate's internals
            $form.validate().resetForm();

            //reset unobtrusive validation summary, if it exists
            $form.find("[data-valmsg-summary=true]")
                .removeClass("validation-summary-errors")
                .addClass("validation-summary-valid")
                .find("ul").empty();

            //reset unobtrusive field level, if it exists
            $form.find("[data-valmsg-replace]")
                .removeClass("field-validation-error")
                .addClass("field-validation-valid")
                .empty();

            return $form;
        };

        //reset a form given a jQuery selected form or a child
        //by default validation is also reset
        $.fn.formReset = function (resetValidation) {
            var $form = this.closest('form');

            $form[0].reset();

            if (resetValidation == undefined || resetValidation) {
                $form.resetValidation();
            }

            return $form;
        }
    })(jQuery);

</script> 