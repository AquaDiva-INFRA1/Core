@model BExIS.Modules.Asm.UI.Models.Classification
@using BExIS.Modules.Asm.UI.Models;

    @{
        string id_for_class = (string)ViewData["id"];
        string label = (string)ViewData["label"];

        List<string> domains = new List<string>() { "Sites", "BioGeoChemichals", "Cycles", "Matter Cycles",
            "Signals", "Phages", "Surface Inputs", "Gases", "Tree Matter", "Groundwater BioGeoChem", "Viruses", "Pathways" };
        List<int> predictions = new List<int>();
        List<Input> class_results = (List<Input>)Model.class_results;
        foreach (Input inp in class_results)
        {
            foreach (string ss in inp.predicted_class.Split(';'))
            {
                if ((ss != " ")&&(!predictions.Contains(Int32.Parse( ss ))))
                {
                    predictions.Add(Int32.Parse(ss));
                }
            }
        }

        List<string> keywords = (List<string>)Model.keywords;
        
    }


    @*
            <p>
                <h3> mapping from class prediction and project</h3>
                ['D03' 'B04' 'A04' 'B02' 'A02' 'A01' 'A03' 'B03' 'B01' 'C03' 'A06' 'C05'] <br />
                [ 0  1  2  3  4  5  6  7  8  9 10 11] <br />


                Domain border: A01, A02, A03, B01, B02, B03, C03 <br />

            </p>
            @{
                List<Int64> datasets = (List<Int64>)ViewData["datasets"];
                string datasets_string = "";
            }


            <p>
                <h2> linked datasets</h2>
                @foreach (Int64 s in datasets)
                {
                    datasets_string = datasets_string + " | " + s;
                }
                @datasets_string
            </p>
            @{
                List<String> nodes = (List<String>)ViewData["nodes"];
                string nodes_string = "";
            }


            <p>
                <h2> linked URIs</h2>
                @foreach (String s in nodes)
                {
                    nodes_string = nodes_string + " | " + s;
                }
                @nodes_string
            </p>

            <p>
                <table>
                    <thead>
                        >
                        <tr>
                            <td>
                                variable name
                            </td>
                            <td>
                                entity
                            </td>
                            <td>
                                predicted class
                            </td>
                            @*
                            <td>
                                matches from ontology domain borders
                            </td>

                                <td>
                                    nodes not found
                                </td>
                                <td>
                                    nodes with no path
                                </td>

                            <td>
                                target domain border files
                            </td>
                            <td>
                                database matches
                            </td>

                                <td>
                                    database no nodes
                                </td>
                                <td>
                                    database no paths
                                </td>

                    </tr>
                </thead>
        @foreach (Input inp in Model)
        {
            <tr>
                <td>
                    @inp.variable_id_from_table
                </td>
                <td>
                    @inp.entity
                </td>
                <td>
                    @inp.predicted_class
                </td>

                    <td>
                        @foreach (string s in @inp.onto_match)
                        {
                            @s <br />
                        }
                    </td>

                        <td>
                            @foreach (string s in @inp.onto_no_node)
                            {
                                @s <br />
                            }
                        </td>
                        <td>
                            @foreach (string s in @inp.onto_no_path)
                            {
                                @s <br />
                            }
                        </td>

                    <td>
                        @foreach (string s in @inp.onto_target_file)
                        {
                            @s <br />
                        }
                    </td>
                    <td>
                        @foreach (string s in @inp.db_match)
                        {
                            @s <br />
                        }
                    </td>
                    @*
                        <td>
                            @foreach (string s in @inp.db_no_node)
                            {
                                @s <br />
                            }
                        </td>
                        <td>
                            @foreach (string s in @inp.db_no_path)
                            {
                                @s <br />
                            }
                        </td>

            </tr>
        }
            </table>
        </p>
    *@





    <head>
        <script type="text/javascript" src='@Url.Content("~/Scripts/vis/vis.js")'></script>

        <link href='@Url.Content("~/Scripts/vis/vis-network.min.css")' rel="stylesheet" type="text/css" />


    </head>

    <div class="row">
        connected terminologies :
        @foreach (Int32 inp in predictions)
        {
            <span class="badge badge-light"> #@domains[inp] </span>
        }
        
    </div>
    <br />
    <div class="row">
        Matched terms : 
        @foreach (string inp in keywords)
        {
            <span class="badge badge-light"> @inp </span>
        }
        <br />
    </div>
    <br />
    <div class="row">
        <div id="map">
            <center>
                <div id="mynetwork"></div>
            </center>
        </div>
        <div class="row">
            <div id="datasets_list" hidden="true">
            </div>
        </div>
    </div>

    <div id="spinner_loader" hidden="true">
        <center><i class="fa fa-spinner fa-spin" style="font-size:50px" id="spinner_loader"></i></center>
    </div>


    <script type="text/javascript">

    classify();
    // create an array with nodes
        function classify() {


        document.getElementById("spinner_loader").removeAttribute("hidden");
        //document.getElementById("mynetwork").setAttribute("hidden", true);
        var nodes_ = [];
        var links = [];
        $.ajax({
            url: '/ASM/DataSetSummary/classificationAsync',
            type: 'POST',
            data: {
                'flag': '1',
                'ds': @id_for_class
            },
            error: function (xhr) {
                alert('Error occured, please contact your administrator');
            },
            success: function (result) {
                if (result != "") {
                    var jsonObject = JSON.parse(result);
                    console.log(jsonObject)
                    for (var k = 0; k < jsonObject['nodes'].length; k++) {
                        var key = jsonObject['nodes'][k];
                        var elem = { id: k, label: jsonObject['nodes'][k] }
                        nodes_.push(elem);
                    }
                    for (var k = 0; k < jsonObject['links'].length; k++) {
                        var ell = jsonObject['links'][k];
                        for (var kk = 0; kk < ell.length - 1 ; kk++) {
                            var elem = { from: ell[kk], to: ell[kk + 1] }
                            console.log(elem, " is ", links.includes(elem) , " - " , links.includes(elem))
                            if (! elemExists(elem, links))
                                links.push(elem);
                        }
                    }
                }
            },
            complete: function () {
                document.getElementById("spinner_loader").setAttribute("hidden", true);
                //document.getElementById("mynetwork").removeAttribute("hidden");
                var nodes = new vis.DataSet(nodes_);
                // create an array with edges
                var edges = new vis.DataSet(links);
                // create a network
                var container = document.getElementById('mynetwork');

                // provide the data in the vis format
                var data = {
                    nodes: nodes,
                    edges: edges
                };
                console.log(data);

                var options = {}
                var network = new vis.Network(container, data, options);
                network.on('click', function (properties) {
                    document.getElementById("datasets_list").setAttribute("hidden", true);
                    var ids = properties.nodes;
                    var clickedNodes = nodes.get(ids);
                    console.log('clicked nodes:', clickedNodes[0].label);
                    $.ajax({
                        url: '/ASM/DataSetSummary/get_datasets_from_annot',
                        type: 'POST',
                        data: {
                            'annot': clickedNodes[0].label
                        },
                        error: function (xhr) {
                            alert('Error occured, please contact your administrator');
                        },
                        success: function (result) {
                            if (result.length > 0) {
                                var jsonObject = JSON.parse(result);
                                var res = "<center>";
                                for (var key of Object.keys(jsonObject)) {
                                    res = res + " <h3>" + key + "</h3><br>";
                                    elem = JSON.parse(jsonObject[key])
                                    for (var key_ of Object.keys(elem)) {
                                        res = res + "<a id=\"" + elem[key_] + "\" onclick=\"onclickDataset(this)\" class=\"mylink\" > <span class=\"badge badge-pill badge-warning\"> " + elem[key_] + "</span></a> ";
                                    }
                                }
                                $('#datasets_list').html(res + "</center>");

                                //document.getElementById("datasets_list").removeAttribute("class");
                                //document.getElementById("datasets_list").setAttribute("class" , "col-md-2");
                                //document.getElementById("map").removeAttribute("class");
                                //document.getElementById("map").setAttribute("class" , "col-md-8");
                            }
                            else {
                                //document.getElementById("datasets_list").removeAttribute("class");
                                //document.getElementById("map").removeAttribute("class");
                                //document.getElementById("map").setAttribute("class" , "col-md-10");
                            }

                        },
                    });
                    document.getElementById("datasets_list").removeAttribute("hidden");

                })
                $("#mynetwork").height(500);
                $("#mynetwork").css('border', '3px solid black');

            }
        });
        }

        function onclickDataset(e) {
        //checked
            var id = e.getAttribute("id");
            var data = {
                id: id
            }

        $.ajax({
            url: '/DDM/Data/IsDatasetCheckedIn',
            type: 'POST',
            data: JSON.stringify(data),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                alert('Error: ' + xhr.statusText);

            },
            success: function (result) {
                if (result) {
                    window.open("/ddm/Data/Show/" + id, "_blank");
                } else {
                    alert("Dataset is locked. Please try again later.");
                }
            }
        });
    }

    function elemExists(elem, arr) {
        return arr.some(function (el) {
            return (el.from == elem.from) && (el.to == elem.to);
      });
}


    </script>

