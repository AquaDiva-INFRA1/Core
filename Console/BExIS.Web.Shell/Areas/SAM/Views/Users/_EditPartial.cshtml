@using BExIS.Web.Shell.Areas.SAM.Models
@using Telerik.Web.Mvc.UI
@model UserEditModel
@using (Ajax.BeginForm("Edit", "Users", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "contentEdit", OnSuccess = "userEdit_onSuccess" }))
{
    @Html.ValidationSummary(true)

    @(Html.Telerik().TabStrip()
            .Name("tabStripEditUser")
            .SelectedIndex(0)
            .Items(tabs =>
            {

                tabs.Add()
                    .Text("Details")
                    .Content(@<text>
                        <table class="bx-table-form">
                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.UserId)
                                         </td>
                                         <td>
                                             @Html.DisplayFor(m => m.UserId, new { @class = "t-input bx-input" })
                                             @Html.HiddenFor(m => m.UserId)
                                         </td>
                                     </tr>

                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.Username)
                                         </td>
                                         <td>
                                             @Html.DisplayFor(m => m.Username, new { @class = "t-input bx-input" })
                                             @Html.HiddenFor(m => m.Username)
                                         </td>
                                     </tr>

                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.FullName)
                                         </td>
                                         <td>
                                             @Html.TextBoxFor(m => m.FullName, new { @class = "t-input bx-input" })
                                             @Html.ValidationMessageFor(m => m.FullName)
                                         </td>
                                     </tr>

                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.Email)
                                         </td>
                                         <td>
                                             @Html.TextBoxFor(m => m.Email, new { @class = "t-input bx-input" })
                                             @Html.ValidationMessageFor(m => m.Email)
                                         </td>
                                     </tr>
                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.Password)
                                         </td>
                                         <td>
                                             @Html.PasswordFor(m => m.Password, new { @class = "t-input bx-input" })
                                             @Html.ValidationMessageFor(m => m.Password)
                                         </td>
                                     </tr>
                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.ConfirmPassword)
                                         </td>
                                         <td>
                                             @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "t-input bx-input" })
                                             @Html.ValidationMessageFor(m => m.ConfirmPassword)
                                         </td>
                                     </tr>
                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.IsApproved)
                                         </td>
                                         <td>
                                             @if (Model.IsApproved)
                                             {
                                                 <input type="checkbox" value="" disabled="disabled" checked="checked" class="js-switch"/>
                                                 @Html.HiddenFor(m => m.IsApproved)
                                             }
                                             else
                                             {
                                                 @Html.CheckBoxFor(m => m.IsApproved, new {@class = "js-switch"})
                                             }
                                         </td>
                                     </tr>

                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.IsBlocked)
                                         </td>
                                         <td>
                                             @Html.CheckBoxFor(m => m.IsBlocked, new {@class = "js-switch"})
                                         </td>
                                     </tr>

                                     <tr>
                                         <td>
                                             @Html.LabelFor(m => m.IsLockedOut)
                                         </td>
                                         <td>
                                             @if (Model.IsLockedOut)
                                             {
                                                 @Html.CheckBoxFor(m => m.IsLockedOut, new {@class = "js-switch"})

                                             }
                                             else
                                             {
                                                 <input type="checkbox" value="" disabled="disabled" class="js-switch"/>
                                                 @Html.HiddenFor(m => m.IsLockedOut)
                                             }
                                         </td>
                                     </tr>
                                 </table>
                    </text>);

                tabs.Add()
                    .Text("Membership")
                    .Content(@<text>
                        @Html.Partial("_Membership")
                    </text>);
            })
    )

    <div class="bx-footer right">
        <button style="margin-right: 1px" type="submit" onclick="windowEdit_onSubmit()"class="bx-button action">Save</button>
        <button style="margin-left: 1px" type="button" onclick="windowEdit_onCancel()" class="bx-button action">Cancel</button>
    </div>

}

<script type="text/javascript">
    $(document).ready(function () {

        var checkboxes = Array.prototype.slice.call(document.querySelectorAll('.js-switch'));

        checkboxes.forEach(function (html) {
            var switchery = new Switchery(html, { size: 'small' });
        });

        $.validator.unobtrusive.parse("#contentEdit");
    });
</script>