@model System.Data.DataTable
@using BExIS.Utils.Models;
@using System.Data;
@using BExIS.Dlm.Entities.DataStructure;
@using Telerik.Web.Mvc.UI;


<header>
    <script type="text/javascript" src="/Scripts/trunk8.js"></script>
    <script type="text/javascript" src="/Scripts/jquery.ba-resize.min.js"></script>

    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"
            integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"
          integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">


</header>

@section Information
{
    <p>Choose the file to process <b>Analysis</b> over.</p>
    <p>Results from <b>Analysis</b> using <b>VrAP</b> are sent via Email.</p>
}

@{
    List<HeaderItem> DefaultHeaderList = (List<HeaderItem>)ViewData["DefaultHeaderList"];
    HeaderItem Id = (HeaderItem)ViewData["ID"];


    StructuredDataStructure sds = new StructuredDataStructure();
    Tuple<StructuredDataStructure, long> defaultModel = new Tuple<StructuredDataStructure, long>(sds, 0);


    GridPagerStyles pagerStyles = GridPagerStyles.PageSizeDropDown;
    pagerStyles |= GridPagerStyles.NextPreviousAndNumeric;
    pagerStyles |= GridPagerStyles.Numeric;

}

<!--Search bar and search results-->

<div class="searchContainer">

    <br />
    <div class="alert alert-danger" role="alert" id="alerts" hidden="true">
        <div id="content_alert"></div>
    </div>

    <div id="searchContent">
        @(Html.Telerik().Grid<System.Data.DataRow>()
                            .Name("resultGrid")

                                .DataBinding(dataBinding => dataBinding
                                .Ajax()
                                .Select("_CustomBinding", "Home", new { area = "UDAM" })
                                )

                                .EnableCustomBinding(true)
                                .HtmlAttributes(new { @class = "result-grid" })
                                .Columns(columns =>
                                {
                                    if (Model != null)
                                    {
                                        for (int i = 0; i < Model.Columns.Count; i++)
                                        {
                                            DataColumn column = Model.Columns[i];
                                            if (DefaultHeaderList.Any(p => p.Name.Equals(column.ColumnName)))
                                            {
                                                string title;
                                                if (column.Caption == "")
                                                {
                                                    title = column.ColumnName;
                                                }
                                                else
                                                {
                                                    title = column.Caption;
                                                }

                                                columns.Bound(column.DataType, column.ColumnName)
                                                    .Title(title);
                                            }
                                            else
                                            {
                                                columns.Bound(column.DataType, column.ColumnName).Hidden()
                                                       .Title(column.Caption);

                                            }
                                        }
                                    }

                                    if (Model != null)
                                    {
                                        if (@Model.Columns.Count > 0)
                                        {
                                            //Additional column with the "View Details"-Button
                                            columns.Bound("").Width(80).ClientTemplate(
                                                    "<div class='searchResultFunctionDiv'>" +
                                                    "<a id='<#= " + @Model.Columns[Id.Name].ColumnName + "#>' class = 'bx bx-grid-function bx-show' title = 'Analyse DataSet' " +
                                                    "onclick='uploadfile(this)'>  </a>" +
                                                    "</div>"
                                                    ).Groupable(false)
                                                        .Sortable(false)
                                                        .Filterable(false);

                                        }
                                    }

                                })

                                .ClientEvents(events => events
                                            .OnRowDataBound("resultGrid_OnRowDataBound")
                                            .OnDataBound("onDataBound")
                                            .OnColumnShow("resultGrid_OnColumnChanged")
                                            .OnColumnHide("resultGrid_OnColumnChanged")

                                            )
                                .Sortable()
                                .Pageable(paging => paging.Style(pagerStyles))
                                .ColumnContextMenu()


        )
    </div>
</div>


<div class="dropdown">
    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
        Dropdown
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
        <li><a href="#">Action</a></li>
        <li><a href="#">Another action</a></li>
        <li><a href="#">Something else here</a></li>
        <li role="separator" class="divider"></li>
        <li><a href="#">Separated link</a></li>
    </ul>
</div>







<div id="spinner_loader" hidden="true">
    <center><i class="fa fa-spinner fa-spin" style="font-size:100px" id="spinner"></i></center>
</div>


<style>
    #errorWrapper {
        text-align: center;
        margin-top: 20px;
        background-color: #ef5c2f;
    }

        #errorWrapper div {
            display: inline-block;
            background-color: #ff8560;
        }
</style>


<script type="text/javascript">

    $('document').ready(function () {

        $('.t-filter').attr("title", "Filter");

    })

    function resultGrid_OnColumnChanged(e) {
    }


    function resultGrid_OnRowDataBound(e) {

    }

    function uploadfile(e) {

        document.getElementById("spinner_loader").removeAttribute("hidden"); 
        document.getElementById("alerts").removeAttribute("style");
        document.getElementById("alerts").removeAttribute("hidden");
        document.getElementById("content_alert").innerHTML = "processing your request ... please wait depending on the size of the file !"; 

        //checked
        var id = e.getAttribute("id");
        
        var data = {
            id: id
        }
        $.ajax({
            url: '/UDAM/Home/check_file_extension_to_analyse',
            type: 'POST',
            data: JSON.stringify(data),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            complete: function (res_check_file_extension_to_analyse) {
                document.getElementById("spinner_loader").setAttribute("hidden", true);
                document.getElementById("content_alert").innerHTML = res_check_file_extension_to_analyse.responseText; 
                $("#alerts").delay(3500).hide(500);
                //alert(res_check_file_extension_to_analyse.responseText);

            }
        });
    }


    function onDataBound() {
        resetAllTelerikIconTitles();
        addTooltips();
    }


</script>