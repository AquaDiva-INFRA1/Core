@using Telerik.Web.Mvc.UI
@using BExIS.Dlm.Entities.DataStructure
@using BExIS.Dlm.Services.DataStructure
@using System
@using System.Text.RegularExpressions
@using BExIS.Web.Shell.Areas.RPM.Controllers
@model List<BExIS.Dlm.Entities.DataStructure.Unit>

@{
    string rgxPattern = "[ ]";
    string rgxReplace = "_";
    Regex rgx = new Regex(rgxPattern);
    
    Unit unit = (Unit)Session["Unit"];
    string windowName = "Add";
    
    if(unit != null)
    {
        if (unit.Name != null && unit.Name != "")
        {
            windowName = rgx.Replace(unit.Name, rgxReplace);
        }
    }
    else
    {
        windowName = "Add";
        unit = new Unit(); 
    }
    
}

@{
    ViewBag.Title = "Unit Manager";
}

    <div>
        <h2>Unit Manager</h2>
         
        <p>With this interface you are able to manage (e.g. create, edit, delete) units which may be needed to define data attributes. Units cannot be edited or deleted once they are associated with a data attribute (they become locked).</p>
    </div>

<div title="Create Unit">
    @Html.ActionLink("Create Unit", "openUnitWindow", "Home", new { id = 0 }, new { @class = "t-button t-add" })
</div>
    <br />
    <br />
    @(Html.Telerik().Grid(Model)    
            .Name("UnitGrid")
            .Sortable()           
            .Columns(columns =>
                {
                    columns.Template(
                        @<text>
                            
                            @if(!(item.DataContainers.Count > 0))
                            {
                            <div class="t-button t-button-icontext t-button-bare">
                            @Html.ActionLink("Edit", "openUnitWindow", "Home", new { id = item.Id }, new { @class = "t-icon t-edit" })
                            @Html.ActionLink("Delete", "deletUnit", "Home", new { id = item.Id }, new { @class = "t-icon t-delete" })
                            </div>
                            }
                            else
                            {
                                <div class="locked">locked</div>
                            }
                            
                        </text>
                    ).Title("Actions")
                        .Width(50)
                        .ClientTemplate(
                            @Html.ActionLink("Edit", "openUnitWindow", "Home", new { id = "<#= id #>" }, new { @class = "t-icon t-edit" }).ToHtmlString() +
                            @Html.ActionLink("Delete", "deletUnit", "Home", new { id = "<#= id #>" }, new { @class = "t-icon t-delete" }).ToHtmlString()
                        );
                    columns.Bound(c => c.Name);
                    columns.Bound(c => c.Id);
                    columns.Bound(c => c.Description);
                    columns.Bound(c => c.Abbreviation);
                    columns.Bound(c => c.Dimension);
                    columns.Bound(c => c.MeasurementSystem);
                    columns.Template(
                        @<text>
                            @{string temp = "";
                              foreach (DataType dt in item.AssociatedDataTypes)
                              {
                                  if (temp== "") 
                                  {temp = dt.Name;}
                                  else  
                                  {temp = temp + ", " + dt.Name;}
                              }
                              }
                              @temp 
                        </text>
                    ).Title("Associated Data Types");
                })
    )
    <br />
    <br />
<div title="Create Unit">
    @Html.ActionLink("Create Unit", "openUnitWindow", "Home", new { id = 0 }, new { @class = "t-button t-add" })
</div>
    

    <div style="position:absolute; left:20%; top:60px;">
                    @{ Html.Telerik().Window()
                            .Name(windowName)
                            .Modal(true)
                            .Visible((bool)Session["Window"])
                            .Draggable(true)
                            .Content(@<text>
                                        @Html.Partial("_editUnit", unit)
                                        </text>)
                            .Render()
                            ;
        
                    }
                    @{Session["Window"] = false;}
    </div>
