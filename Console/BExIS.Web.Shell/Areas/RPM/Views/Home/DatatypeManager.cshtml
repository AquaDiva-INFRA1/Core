@using Telerik.Web.Mvc.UI
@using BExIS.Dlm.Entities.DataStructure
@using BExIS.Dlm.Services.DataStructure
@using System
@using System.Text.RegularExpressions
@model List<BExIS.Dlm.Entities.DataStructure.DataType>

@{
    string rgxPattern = "[ ]";
    string rgxReplace = "_";
    Regex rgx = new Regex(rgxPattern);

    DataType dataType = (DataType)Session["DataType"];
    string windowName = "Add";

    if(dataType != null)
    {
        if (dataType.Name != null && dataType.Name != "")
        {
            windowName = rgx.Replace(dataType.Name, rgxReplace);
        }
    }
    else
    {
        windowName = "Add";
        dataType = new DataType();
    }
}

@{
    ViewBag.Title = "Data Type Manager";
}
    <div>
        <h2>Data Type Manager</h2>
        
        <p>With this interface you are able to manage (e.g. create, edit, delete) data types which are required to define units and data attributes. Data types cannot be edited or deleted once they are associated with a unit (they become locked).</p>
    </div>

<div title="Create a new Data Type">
    @Html.ActionLink("Create Data Type", "openDataTypeWindow", "Home", new { id = 0 }, new { @class = "t-button t-add" })
</div>
    <br />
    <br />
    @(Html.Telerik().Grid(Model)    
            .Name("UnitGrid")
            .Sortable()     
            .Scrollable(t => t.Height(400))     
            .Columns(columns =>
                {
                    columns.Template(
                        @<text>
                            @if(!(item.DataContainers.Count > 0))
                            {
                                <div class="t-button t-button-icontext t-button-bare">
                                    @Html.ActionLink("Edit", "openDataTypeWindow", "Home", new { id = item.Id }, new { @class = "t-icon t-edit" })
                                    @Html.ActionLink("Delete", "deletDataType", "Home", new { id = item.Id, item.Name }, new { @class = "t-icon t-delete" })
                                </div>
                            }
                            else
                            {
                                <div class="locked">locked</div>
                            }
                        </text>
                    ).Title("Actions")
                        .Width(100)
                        .ClientTemplate(
                            @Html.ActionLink("Edit", "openDataTypeWindow", "Home", new { id = "<#= id #>" }, new { @class = "t-icon t-edit" }).ToHtmlString() +
                            @Html.ActionLink("Delete", "deletDataType", "Home", new { id = "<#= id #>", dataType.Name}, new { @class = "t-icon t-delete" }).ToHtmlString()
                        );
                    columns.Bound(c => c.Name).Width(150);
                    columns.Bound(c => c.Id).Width(80);
                    columns.Bound(c => c.SystemType).Width(150);
                    columns.Bound(c => c.Description);
                })
    )
    <br />
    <br />
<div title="Create a new Data Type">
     @Html.ActionLink("Create Data Type", "openDataTypeWindow", "Home", new { id = 0 }, new { @class = "t-button t-add" })
</div>
    
    <div style="position:absolute; left:20%; top:60px;">
                    @{ Html.Telerik().Window()
                            .Name(windowName)
                            .Visible((bool)Session["Window"])
                            .Draggable(true)
                            .Modal(true)
                            .Content(@<text>
                                        @Html.Partial("_editDataType", dataType)
                                        </text>)
                            .Render()
                            ;
        
                    }
                    @{Session["Window"] = false;}
    </div>