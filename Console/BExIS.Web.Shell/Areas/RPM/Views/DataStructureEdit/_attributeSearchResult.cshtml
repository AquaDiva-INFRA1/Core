@using Telerik.Web.Mvc.UI
@using BExIS.Web.Shell.Areas.RPM.Models
@model BExIS.Web.Shell.Areas.RPM.Models.AttributePreviewModel

<div class="bx-rpm-attributeheader">
    <table>
        <tr>
            <td colspan="2"><h2>Variable Templates</h2></td>
        </tr>
        <tr>
            <td class="bx-rpm-sort">
                <span class="bx-rpm-filterCollapse" onclick="javascript:clickFilter()">
                    Filter
                    <span id="filterCollapse" class="bx bx-angle-double-down"></span>
                </span>
                <span class="bx-rpm-activefilter"></span>
            </td>
            <td class="bx-rpm-sortdropdown">
                Sort by
                <select class="bx-dropdown bx-rpm-dropdown">
                    <option value="">no Sorting</option>
                    <option class="name" value="name,true">Name &uArr;</option>
                    <option class="name" value="name,false">Name &dArr;</option>
                    <option class="id" value="id,true">Id &uArr;</option>
                    <option class="id" value="id,false">Id &dArr;</option>
                    <option class="unit" value="unit,true">Unit &uArr;</option>
                    <option class="unit" value="unit,false">Unit &dArr;</option>
                    <option class="datatype" value="datatype,true">Data Type &uArr;</option>
                    <option class="datatype" value="datatype,false">Data Type &dArr;</option>
                </select>
                <div class="t-arrow-down bx-rpm-dropdownArrow"></div>
            </td>
        </tr>
    </table>

    <div class="bx-rpm-filter collapsed" id="filter" style="display:none;">
        <div id="filterContainer" style="display:none;">
            <h3 class="bx-rpm-loading"><span class="fa fa-spinner fa-pulse"></span> Loading Filters</h3>
        </div>
    </div>
</div>

<div class="bx-rpm-attribute-container" id="Results">
    <div class="bx-rpm-attribute-drag-drop">
        @foreach (AttributePreviewStruct aps in Model.AttributePreviews)
        {        
            @Html.Partial("_attributeElement", aps)
        }
    </div>
</div>
<div class="bx-rpm-attribute-functions">
    <button class="bx-button action" id="createAttribute" onclick="javascript:openAttrWindow(0)">Create Variable Template</button>
    <button class="hidden" id="addAttribute" value="0">Add Variable Template to List</button>
    <button class="hidden" id="removeattribute" value="0">remove Variable Template to List</button>
</div>

<script type="text/javascript">
    var filterIds = [];

    $(function () {
        resizeAttributeContainer(120);
        initIsotope();
    });
    function initIsotope() {
        // init Isotope
        var $attributeGrid = $('.bx-rpm-attribute-drag-drop').isotope({
            itemSelector: '.bx-rpm-attribute-item',
            layoutMode: 'vertical',
            transitionDuration: '0.5s',
            getSortData: {
                name: '#Name',
                id: '#Id parseInt',
                description: '.description',
                unit: '#Unit',
                datatype: '#DataType',
                category: '[data-category]',
                weight: function (itemElem) {
                    var weight = $(itemElem).find('.weight').text();
                    return parseFloat(weight.replace(/[\(\)]/g, ''));
                }
            }
        });

      // bind sort button click
        $('.bx-rpm-sortdropdown').on('change', 'select', function () {
            var sortValue = $(this).val().split(',');
            $attributeGrid.isotope({ sortBy: sortValue[0], sortAscending: (sortValue[1] == 'true') });
            //$(this).find('.' + sortValue[0]).toggle();

        });

        $('#filterContainer').on('click', '.bx-rpm-filterCheckbox', function () {
            if ($(this).hasClass('checked')) {
                filterIds.splice(filterIds.indexOf($(this).attr('id')));
            }
            else {
                var check = true;
                for (i in filterIds) {
                    if (filterIds[i] == $(this).attr('id')) {
                        check = false;
                        break;
                    }
                }

                if (check)
                    filterIds.push($(this).attr('id'));
            }
            var filterValue = setFilter(this);
            $attributeGrid.isotope({ filter: filterValue });

            var append = true;

            for (var i = 0; i < $('.bx-rpm-activefilter .bx-button').length; i++) {
                if ($('.bx-rpm-activefilter .bx-button')[i].getAttribute('value') == $(this).attr('id')) {
                    $('.bx-rpm-activefilter .bx-button')[i].parentNode.removeChild($('.bx-rpm-activefilter .bx-button')[i]);
                    append = false;
                    break;
                }
            }

            if (append) {
                var filterItem = $(this).parents('.bx-rpm-filterItem')
                var filterElement = $(document.createElement('div'));
                filterElement.addClass('bx-button smaller');
                filterElement.attr('id', 'removefilter')
                filterElement.attr('value', $(this).attr('id'));
                filterElement.text(filterItem.find('.bx-rpm-filterCheckboxLable').text().split('(')[0]);

                var filterRemove = $(document.createElement('span'));
                filterRemove.addClass('bx fa-times bx-rpm-removefilter')
                filterElement.append(filterRemove);
                $('.bx-rpm-activefilter').append(filterElement);
            }
        });

        $('.bx-rpm-activefilter').on('click', '.bx-rpm-removefilter', function () {
            var filterElement = $(this).parents('#removefilter');
            var filterValue = setFilter($('#' + filterElement.attr('value')));
            filterIds.splice(filterIds.indexOf(filterElement.attr('value')));
            $attributeGrid.isotope({ filter: filterValue });
            filterElement.remove();
        });

        $('#resetFilter').on('click', function () {
            var filterValue = resetFilter();
            $attributeGrid.isotope({ filter: filterValue });
        });

        $attributeGrid.on('click', '.bx-rpm-attribute-item .bx-rpm-expand', function () {
            var attributeElement = $(this).parents('.bx-rpm-attribute-item');
            var hiddenElements = attributeElement.find('.hiddenelements');
            if (hiddenElements.hasClass('hidden')) {
                $(this).find('#attributecollapse').removeClass('bx-angle-double-down');
                $(this).find('#attributecollapse').addClass('bx-angle-double-up');
            }
            else {
                $(this).find('#attributecollapse').removeClass('bx-angle-double-up');
                $(this).find('#attributecollapse').addClass('bx-angle-double-down');
            }
            hiddenElements.toggleClass('hidden');
            $attributeGrid.isotope('layout');
        });

        $('.bx-rpm-attribute-functions #removeattribute').on('click', function () {
            var attrId = $('.bx-rpm-attribute-functions #removeattribute').attr('value');
            var attributeElement = $('.bx-rpm-attribute-container #attribute_' + attrId);
            $attributeGrid.isotope('remove', attributeElement);
            $attributeGrid.isotope('layout');
        });

        $('.bx-rpm-attribute-functions #addAttribute').on('click', function () {
            var attrId = $('.bx-rpm-attribute-functions #addAttribute').attr('value');
            var parameters = '/?attributeId=' + attrId;
            $.get('@Url.Action("_getAttributeElement", "DataStructureEdit", new { area = "RPM" } )' + parameters, function (data) {
                if ($(data).hasClass('bx-rpm-message')) {
                    createMessageWindow(data, 'Add Variable Template '+ attrId, 'dataattribure', attrId);
                }
                else {
                    $item = $(data);
                    $attributeGrid.append($item).isotope('appended', $item);
                    loadFilter();
                    $('.bx-rpm-sortdropdown .bx-rpm-dropdown').val('id,false').change();
                }
            });
            $attributeGrid.isotope('layout');
        });


    }

    function clickFilter() {
        if ($('#filter').hasClass('collapsed')) {
            loadFilter();
            $('#filter').slideDown('slow');
            $('#filter').removeClass('collapsed');
            $('#filterCollapse').addClass('bx-angle-double-up');
            $('#filterCollapse').removeClass('bx-angle-double-down');
        }
        else {
            $('#filter').slideUp('slow');
            $('#filter').addClass('collapsed');
            $('#filterCollapse').addClass('bx-angle-double-down');
            $('#filterCollapse').removeClass('bx-angle-double-up');
        }
        $('#filterContainer').slideToggle('slow');
        resizeAttributeContainer(600);
    }

    function loadFilter() {
        $.get('@Url.Action("_attributeFilterBinding", "DataStructureEdit", new { area = "RPM"} )', function (data) {
            var temp = [];
            for (i in filterIds) {
                  temp.push(filterIds[i]);
            }
            $('.bx-rpm-activefilter .bx-rpm-removefilter').trigger('click');
            $('#filterContainer').html(data);
            for (i in temp) {
                $('.bx-rpm-filterContainer #' + temp[i]).trigger('click');
            }
        });
    }

    $(window).resize(function () {
        setTimeout(function () {
            $('.bx-rpm-attribute-container').height(getAttibuteContainerSize());
        }, 120);
    });

    function resizeAttributeContainer(delay) {
        setTimeout(function () {
            $('.bx-rpm-attribute-container').animate({
                'height': getAttibuteContainerSize()
            });           
        }, delay);
    }

    function getAttibuteContainerSize(){
        return $(window).height() - $('.navbar').height() - $('.bx-rpm-attributeheader').height() - $('.bx-rpm-attribute-functions').height() - 95;
    }

    function openAttrDelWindow(id, name, type) {
        var parameters = '/?Id=' + id;

        $.ajax({
            type: 'GET',
            url: '@Url.Action("_deleteDataAttributeBinding", "DataStructureEdit")' + parameters,
            dataType: 'html',
            success: function (data) {
                createMessageWindow(data, 'Delete DataStructure ' + name + ' (' + id + ')', type, id);
            }
        });
    }


    function openAttrWindow(id) {
        var parameters = '/?attributeId=' + id;
        var title = 'Create Variable Template'
        $.ajax({
            type: 'GET',
            url: '@Url.Action("_createAttributeBinding", "DataStructureEdit")' + parameters,
            dataType: 'html',
            success: function (data) {
                var windowElement = $.telerik.window.create({
                    title: title,
                    html: data,
                    contentUrl: "",
                    actions: ["Close"],
                    modal: true,
                    resizable: false,
                    draggable: true,
                    scrollable: false,
                    onClose: function () {
                        $("#createAttributeWindow").data('tWindow').destroy();
                    }
                });

                windowElement.attr('id', 'createAttributeWindow');
                var window = $(windowElement).data('tWindow');
                window.center().open();

                resetAllTelerikIconTitles();
            }
        });
    }

    function addVariable(id,name){
        if ($('.bx-rpm-dataStructure-functions').length > 0) {
            $('.bx-rpm-dataStructure-functions #addVariableButton').attr('value', id + ',' + name);
            $('.bx-rpm-dataStructure-functions #addVariableButton').trigger('click');
        }
    }
</script>